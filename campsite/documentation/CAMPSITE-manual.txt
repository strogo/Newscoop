CAMPSITE
Web Automation Tool 
User Guide

CAMPSITE version: 2.1.0 and newer versions
Maintained and distributed under GNU/GPL by CAMPWARE
http://www.campware.org
Manual version: 1 November 2002 
Language: English
©1999-2002 Media Development Loan Fund
http://www.mdlf.org - http://www.mdlf-camp.net
Table of Contents
INTRODUCTION
COPYRIGHT
1. INSTALLATION GUIDE
1.1. REQUIREMENTS
1.2. TODO
1.2.1 Configure the Web server
1.2.2 Customize the application framework
1.2.3 The CAMPFIRE Java Editor
1.2.4 KNOWN LIMITATIONS: Apple Macintosh
1.3 UPGRADING FROM VERSIONS 1.x or 2.0
1.3.1 Compatibility issues
1.3.2 New template language features
2. BRINGING YOUR PUBLICATIONS ONLINE WITH CAMPSITE
2.1. CONFIGURING THE PUBLISHING ENVIRONMENT
2.1.1 Languages
2.1.2 Countries
2.1.3 The localizer
2.1.4 User Management
2.2. CREATING PUBLICATIONS
2.2.1 Creating a new publication
2.2.2 Creating a new issue
2.2.3 Add new sections to an issue
2.2.4 Defining article types
2.2.5 Creating articles within a section
2.2.6 Editing articles: Edit Article Details view
2.2.7 Editing body-type fields: Working with CAMPFIRE
2.2.8 Publishing articles
2.2.9 Setting the finalized publication live
2.3. GLOSSARY
2.3.1 Creating 'Infotypes'
2.3.2 Adding keywords to the Glossary
2.3.3 Marking Glossary keywords in articles
2.3.4 What pays the piper, will see the surfer
2.3.5 Known Limitations of the Glossary
2.4. TOPICS
2.5. CONFIGURING THE SUBSCRIPTION MODULE
2.5.1 Username:Password Access
2.5.2 Customizing Subscription Interface for Readers
2.5.3 IP Address-based Subscriptions
3. CREATING TEMPLATES FOR YOUR PUBLICATION
3.1. MODULAR STRUCTURE OF TEMPLATES
3.2. FIXED FRAMEWORK: COMMUNICATING WITH YOUR DATABASE
3.3. BUILDING AN ARTICLE TEMPLATE: ARTICLETEMPLATE.TPL
3.4. GENERATING A NAVIGATION TEMPLATE: NAVIGATIONTEMPLATE.TPL
3.5. BUILDING THE SECTION TEMPLATE: SECTIONTEMPLATE.TPL
3.5.1 The 'Feature' article of the section
3.5.2 Displaying only the most recent feature article on a section page
3.5.3 Including Images in the Section Listing
3.6. BUILDING THE HOME PAGE TEMPLATE: HOME.TPL
3.7. SOME HINTS: POWERFUL LISTS AND ORDERING
3.8. ENVIRONMENTAL CONTROL WITH CAMPSITE TEMPLATES
3.8.1 Runtime parameters
3.8.2 Other parameters
3.9. STRUCTURE OF CAMPSITE TEMPLATES
3.9.1 Language Elements. Conventions
3.9.2 'Define-environment' instructions
3.9.3 Flow control instructions
3.9.4 Printable information
4. APENDIX I - ALPHABETIC LIST OF LANGUAGE STATEMENTS
5. APPENDIX II - CHARACTER SETS AND LANGUAGES
6. APPENDIX III - ISO 639 LANGUAGE CODES
7. APPENDIX IV: INSTALLING CAMPSITE ON A STANDARD RED HAT 7.0 SERVER
8. APPENDIX V - BACKING UP DATABASES IN MYSQL

INTRODUCTION
CAMPSITE is a multilingual, Unicode-based content management system, featuring easy localization of the backend user interface. CAMPSITE was designed for medium-to-large-size online news publications. Issues, copy flow, back archives, as well as subscription management are fully implemented features. At the core of CAMPSITE is CAMPFIRE, a near-WYSIWYG Java editor based on Unicode, which allows journalists and editors to publish content and control layout online in their native character sets. Formatting can be altered in a similar way as in editors such as Wordpad, meaning that absolutely no HTML knowledge is necessary for formatting and inputting text.
The original CAMPSITE concept was developed by Center for Advanced Media-Prague (CAMP) in collaboration with Transitions Online, which started using CAMPSITE in late 2000. DNT-Cluj (http://www.dntcj.ro) and Recognos (http://www.recognos.com), software companies based in Cluj, Romania accomplished the original coding and part of the further development. Current core development is taken care of by CAMP New Media Fellows. For a detailed revision history, go to http://www.campware.org/campsite. CAMPSITE in action can be seen, among other locations, on the web sites of Transitions Online (http://www.tol.cz), Fluter (http://www.fluter.de), Feral Tribune (http://www.feral.hr) and Reporter (http://www.reporter-magazin.com).
Test drives of CAMPSITE are available soon at the campware project site (http://www.campware.org). Mail us for any related questions at contact@campware.org.
CAMPSITE tech specs in a nutshell:
CAMPSITE server: 
runs on a Linux server, originally tested on RedHat 7.0 and Mandrake 8.0 and has proven compatible with RedHat 7.1, 7.2, 8.0, Mandrake 8.1, 8.2, 9.0 and Debian
requires an Apache web server to be running, and its virtual servers to be configured by the administrator.
needs a MySQL database server for Linux to be able to store data. The tests were made on MySQL v.3.23.36.
requires PHP (version 3.0 and up) to be running 
CAMPSITE client side:
runs on top of standard Java Virtual Machine Plugin (plugin version 1.3.1 and up) in Netscape under Unix (tested on version 6.2), Netscape under Windows (versions 6.2 and up),and MS Internet Explorer (versions 5.0 and up). On Macintosh it works in Internet Explorer under OS X.
COPYRIGHT
CAMPSITE is a Unicode-based multilingual web content management system for news publications. CAMPFIRE is a Unicode-based java-based near-WYSIWYG text editor. 
Copyright ©1999-2002 Media Development Loan Fund.
Contact: http://www.campware.org 
Campware encourages further development and financial contributions. Please let us know at contact@campware.org.
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

1. INSTALLATION GUIDE
1.1. Requirements
The server part of the application runs on a Linux computer. It was originally developed and tested on RedHat 7.0 release and works on all subsequent releases, and it has proven compatible with Mandrake 8.0 and higher as well as on Debian 2.0 and up.
Before installing CAMPSITE, make sure you have two other applications up and running:
1. Apache web server -- your http daemon, serving your web site to the world (http://www.apache.org). You will need version 1.3.x or newer.
For installation instructions, see the Apache web site. Installing Apache will generate the httpd.conf file referred to further down. This file contains all relevant information for Apache to handle the content on your Linux server. The adjustments described below need to be made in order to tell Apache about the procedures for CAMPSITE files and templates.
2. MySQL Database Server - this application handles the CAMPSITE database. You will need MySQL 3.23.x or newer (http://www.mysql.com).
Three components of MySQL are needed for CAMPSITE:
the server
client programs
files and libraries for development
All of those can be found on the MySQL website.
When installing on Red Hat, look for the section 'Standard Binary RPMs' which have been compiled especially for Red Hat and should cause the least hassle. You can install these files on prompt level by typing 'rpm -t nameoffile.rpm' (without the '').
1.2. TODO
Here is what you need to do.
1.2.1 Configure the Web server
First you need to change the behavior of the http daemon (the Web server). The configuration file, called httpd.conf, is normally found in the /etc/httpd/conf/ folder (N.B. non-standard installation of the Apache server can change the location of the file). The changes you have to apply to the file are:
- activate the DirectoryIndex directive and add to it the following option:
/priv/templates/idx.php
- activate the IndexIgnore directive and set it to
IndexIgnore *
- add the following lines:
AddHandler tpl_handler .tpl 
Action tpl_handler /cgi-bin/tpl_cgi /priv/templates/idx.php
- make sure that the server has the rights to read, write and execute in the folder where the file are stored and uploaded. Standardly, the user and group should be set as 'httpd'; the rights should be set as 'rwx' for the user and 'rw' for the group. Consult the Linux Administration Guide for further information. Furthermore, the Web server should have activated the UniqueID option (the mod_unique_id should be loaded)
- restart the httpd daemon:
killall httpd
{PATH}/httpd
or
/etc/rc.d/init.d/httpd restart
1.2.2 Customize the application framework
1.Copy the CAMPSITE archive in a directory on the server. 
2.Unarchive it using the command: tar xzvf <campsite_archive> 
3.Enter campsite directory. 
4.Run './install', answer the install questions and wait for the application to be installed. 
1.2.3 The CAMPFIRE Java Editor
At the heart of CAMPSITE's client interface, lies CAMPFIRE, a text editor implemented as a signed Java Applet. For this applet to work, you need to have the standard Java Virtual Machine plugin (version 1.3.1) installed on your Unix or Windows client machine (it may well already be there) and it is native on Macintosh OS X systems. 
If you don't already have the plugin on a Windows machine, CAMPFIRE will automatically download the .exe version of the plugin from the Sun Microsystems's website and you will be prompted to initialize installation will start automatically (please be patient, the plugin is rather large). 
In either case, make sure to make sure you click on 'Grant always' option in the popup window asking you 'Do you want to install and run signed applet distributed by "Campsite team"'(if you do otherwise, you will not be able to cut and paste within the editor). 
1.2.4 KNOWN LIMITATIONS: Apple Macintosh
CAMPFIRE currently works only on Internet Explorer under OS X. We are working on expanding the range of browsers it works with. System 9.x and lower are not supported.
1.3. UPGRADING FROM VERSIONS 1.x or 2.0
Upgrading from 1.x or 2.0 versions of Campsite requires three actions to be performed before the installation: 
database conversion to UTF-8 character set
templates conversion to UTF-8 character set
templates structure update
While the templates structure update requires no special knowledge the database and templates conversion to UTF-8 requires UNIX/Linux administration knowledge. The future versions of CAMPSITE should provide a tool that will automate this process, making it easier.
1.3.1. Compatibility issues
Since CAMPSITE 2.1 uses UTF-8 encoding the older database and templates must be converted; the database conversion is more complex and error prone while the templates conversion requires only the issuing of one shell command.
Conversion from any character set to UTF-8 can be achieved by using standard iconv tool; for usage type "man iconv".
Converting the database can be done in three steps:
dumping the old database into different files - one for every different character set
converting the files from their character sets to UTF-8
reconstructing the database from the files
Dumping the old database into different files:
dump tables structure only: mysqldump ... <database> -d > tables.sql
dump tables data which is not dependent on language:
mysqldump ... -t --tables ArticleTopics AutoId Errors Events Images KeywordIndex Log SubsByIP SubsDefTime SubsSections Subscriptions UserPerm UserTypes Users > data_nolang.sql
dump tables data dependent on language; issue one command for every character set in the database; group languages having the same character set:
mysqldump ... -t --tables ArticleIndex Articles Classes Countries Dictionary Issues KeywordClasses Publications Sections TimeUnits Topics <article_type_tables> --where="IdLanguage = <l1> or IdLanguage = <l2>..." > data_charset1.sql
Converting the files from their character sets to UTF-8:
for every generated file issue the following command:
iconv -f <charset> -t UTF-8 <file_name> > <file_name>.utf8; tables.sql and data_nolang.sql use ISO_8859-1 character set.
Reconstructing the database from the files:
for every utf8 file issue the following command:
mysql ... < <file_name>, starting with tables.sql
Converting the templates to UTF-8: issue the following commands for every template in the /look/ directory:
	iconv -f <charset> -t UTF-8 <template_name> > <template_name>.utf8
	mv -f <template_name>.utf8 <template_name>
where <charset> must be replaced by the template character set.
Updating templates structure: Some attributes of List Article statement are no longer supported in version 2.1, so all templates using those attributes must be updated.
Attributes no longer supported:
- IsOn|IsNotOn FrontPage
- IsOn|IsNotOn Section 
Replacing unsupported attributes: 
- "IsOn FrontPage" replaced by: "OnFrontPage is on"
- "IsNotOn FrontPage" replaced by: "OnFrontPage is off"
- "IsOn Section" replaced by: "OnSection is on"
- "IsNotOn Section" replaced by: "OnSection is off" 
For details see List of Articles. 
1.3.2. New template language features
a. New attributes to "If Issue" statement:
- name <string_operator> <string_value>
- publish_date <date_operator> <date_value>
For details see If Issue. 
b. New attributes to "List Issue" statement: 
- publish_date <date_operator> <date_value> 
For details see List of Issues.
c. New attributes to "If Article" statement:
- name <string_operator> <string_value>
- upload_date <date_operator> <date_value>
- has_keyword <string_value>
- public
- OnFrontPage <switch_operator> <switch_value>
- OnSection <switch_operator> <switch_value>
- translated_to <string_value>
- <article_field> <field_type_operator> <field_type_value>
For details see If Article. 
d. New attributes to "List Article" statement: 
- upload_date <date_operator> <date_value>
- public <switch_operator> <switch_value>
- <article_field> <field_type_operator> <field_type_value> 
For details see List of Articles. 
2. BRINGING YOUR PUBLICATIONS ONLINE WITH CAMPSITE
CAMPSITE enables you to publish (host) multiple multilingual publications (web sites) on the same server. The process can be roughly divided in four steps:
configuring the publishing environment (establishing access rights, country-relevant information, languages you intend to publish in, subscription, etc.), and possibly localizing the user interface into the language of your choice
establishing the structure of your publication(s)
creating the templates which determine the look and feel of your publications
adding content and managing your publications
2.1. Configuring the publishing environment
Your first step on the road to bringing your publications online with CAMPSITE is to configure the publishing environment. This involves setting up parameters such as languages that you are or will be publishing in, definition of typical user types, and the very structure of your publication(s).
After you log in for the first time with the default user name (admin) and password (admn00) you will reach administrator's interface.
The left frame contains a list of modules that you can access, while the right frame displays the currently selected module.
CAMPSITE appears differently to different users. Each user sees only the options that he or she has the right to access or alter. A typical backend user (an editor or journalist) will get to see only a fraction of the options available to a fully authorized user (such as the default administrator).
On top of that, each user is able to choose his interface language. The default language is English, but you can either use one of the localized versions we supply (at the moment, we supply the German, Russian, and Czech versions) or create your own (see The Localizer section below).
2.1.1 Languages
While CAMPSITE's default language is English, you are by no means limited to publishing in that language only. It's actually very much au contraire.
The language module enables you to configure support for languages that you wish to publish in. If your tongues of choice happen to be absent from the list of CAMPSITE's pre-configured languages, you can configure your own languages.
To do so, enter the Languages module and click on 'Add new language'. You should enter the language name (both in English and in the language itself), its code (e.g. hr for Croatian), the code page your will be saving your templates in on your local machine (e.g. if you are working on a Windows machine on your Russian cyrillic template in an editor, you will want to specify KOI-8 or Windows-1251), and the names of months and days of the week in the language you are configuring. 
[NOTE TO ADMINISTRATOR: You may want to limit the number of languages configured on your server in order to spare your users from long drop-down language menus. Sometimes less is more, if you know what we mean.]
2.1.2 Countries
This module determines how country lists will appear in user-profile forms. The module allows you to create country lists in different languages. When you click on 'Add new country', you will be prompted to enter the country's name in a language of your choice as well as the country's code . The language dropdown menu will contain as many languages as you had defined in the Languages module (see section 2.1.1).
[N.B. The language you are asked to specify is the language in which you are entering a country's name, *NOT* the language spoken in the country!]
2.1.3 The Localizer
The localizer is a new module of CAMPSITE that is introduced in version 2.1. The module allows you to create your own localization of CAMPSITE's backend user interface by simply translating individual strings that appear in the interface. 
To do so, enter the Localizer, scroll down to the bottom of the window and select a language in which you want to create localization files from the dropdown menu (the menu will contain as many languages as you have had configured in the Languages module) and then press the 'Create files' button. This will create a range of globals.xx.php files and locals.xx.php files, which will be visible in the left frame of the Localizer. Select one of the newly created files, and the strings related to that particular part of the interface will be shown in the right frame. You can interrupt the translation process at any time. Just press save at the bottom of the frame and exit the localizer. When you return, you'll find all the non-translated strings in red and you can continue from where you left off.
[NOTE: Localization currently works for the entire user interface, minus the OK and Cancel buttons. The CAMPFIRE Java editor is fully localizable, but that is done outside the localizer (CAMPFIRE strings have to be compiled separately; the localization text file is available from http://). For more information on how to become a localization volunteer for CAMPSITE and CAMPFIRE, please send an e-mail to <contact@campware.org>.]
2.1.4 User Management
CAMPSITE's user management module allows you to control access to the backend and the front end of your publication(s). In other words, the module, which features a search option, allows you to define who will have the right to manage and edit content on your site and who will be allowed to read it.
2.1.4.1 Backend Access: Creating User Types
A user is generally defined by the list of the tasks he or she has and is allowed to do in a system. In CAMPSITE, this list of tasks ranges from creating, managing, and editing publications, sections, and articles, to template management and definition of the publishing environment.
To simplify user management, CAMPSITE allows you to create generic user types, which can then be assigned to multiple users, instead of taking care of every single access right for every single user.
CAMPSITE comes "out of the box" with three default user types:
Administrator - user with full authorization, i.e. all rights (normally reserved to webmasters)
Chief Editor - user with higher editorial rights (e.g. has a right to create and delete issues)
Editor - standard backend user with rights limited to basic article management and editing (normally assigned to journalists and editors)
Reader - the profile limited to viewing the site, i.e. front end only.
To create your custom user profiles, click on 'User types' and then on 'Add new user type'. Then proceed to select the rights that you want included for this type of user.
2.1.4.2 Backend Access: Creating Users
To add a user, click on 'Users' and choose 'Add new user account'.
You should specify the full name of the user, user name, password, and choose a predefined user type (i.e. one of the default types or your custom user types). 
If you would like to further fine tune the rights assigned to a particular user, go to 'Users' and click on 'Rights' in the same row with the user's name.

2.1.4.3 Front-End Access: Subscription
CAMPSITE allows you to control public access to your publication(s) through its built-in subscription module, more on which you can read more in section 2.5). 
[TIP: If you want to have all your content freely accessible, you can bypass this feature by structuring your templates in a special way. For more information on that, go to the section Creating Templates for your Publication.] 
For now, you should know that all articles you create in your publication(s) are by default available to subscribers only. Publication editors or administrators have the right to make an article accessible to non-subscribers.

The way it works from readers' side is as follows:
If a reader tries to access a non-public article, she is informed that she is not allowed to read the article but is provided with an option to subscribe immediately to that article or other articles or the whole publication. A temporarysubscription is activated immediately (the duration of that temporary subscription is determined by the value you set for the 'Pay Time', For more information, see section 2.5). During this period, the reader has a chance to effect the payment and consequently have her subscription extended by the administrator. 

The publication's administrator is automatically notified of all new subscriptions by e-mail. 
Subscribers also receive automatically generated e-mail reminders that their subscription is expiring 14 days before the event. 

[NOTE: The text of the subscription-expiry message is hardcoded in the current version of CAMPSITE and it reads as follows:
"Dear <reader>,
This is an automatically generated e-mail message. Your <subs_type> subscription (started on
<start_date>) to publication <publication> will expire as follows:
<section> on <exp_date> (remained <rem_days> days) - started on <start_date>
<section> on <exp_date> (remained <rem_days> days) - started on <start_date>
Please enter the site http://<pub_site> to update subscription."

Future versions of CAMPSITE (as of version 2.2) will allow for customization of the message and for its translation into multiple languages.]
2.2. Creating publications
CAMPSITE has a clear four-tier hierarchical structure, which conforms to the traditional structure of news publications. Each publication is thus made up of issues; each issue is in turn made up of sections, which are themselves comprised of articles.
CAMPSITE's user interface is straightforward. A site map is present on every screen, which enables easy navigation between different levels. Each module of the publication is associated to a level. By clicking on the name of the module, you enter the structure of the next level or you edit the current module, depending on its position.
For example, after creating the "Prague Times" publication, by clicking on 'Prague Times' in the list of publications, you enter the list of issues for "Prague Times". By clicking the name of an issue, you enter its list of sections. By clicking the name of a section you enter the article list. By clicking the article name you enter the article structure and can edit the different components (fields) of the article.
2.2.1 Creating a new publication
To create a new publication, you need to enter the Publications module. Once you are there, click on 'Add new publication'.
[NOTE: If you are not the default administrator, you may not be able to see the 'Add new publication' option. You may want to ask your site administrator to alter your access rights. Bear in mind, however, that a good administrator would be reluctant to hand over those rights to more than a handful of people. If you are not among those select few, your Publications view will only contain a list of publications hosted on this particular CAMPSITE server.]
At this point, you should specify the following:
Name of the publication (e.g. "Prague Times")
Site - the name of the server (or IP address) on which your publication will be hosted (e.g. www.praguetimes.net) and on which it will ultimately be accessible to readers.
Language - the default language of the publication
The rest of fields are related to subscriptions, and if you would like to leave the decisions on whether and how much are you going to charge for your publication for later, you may just skip those and return to them at some later stage (preferably after you read section 2.5 where subscription is covered in greater detail). But even at this stage, perhaps you'd like to know what they mean:
Pay Period - time within which the reader has to pay for his subscription, because his temporary automatic subscription is expiring in that many days (If you don't want to allow any automatic free access to your site, you will set this value to "0").. 
Time unit - select the unit in which you will measure the duration of trial or paid subscriptions to your publication from the dropdown menu (days, weeks, months, years)
Unit cost - the cost of each time unit
Currency - the monetary unit you will be charging in for your publication
Paid period - the default duration of paid subscription
Trial period - default duration of trial subscriptions.
Any of the data entered on this screen can be altered or fine-tuned at a later stage.
[NOTE: CAMPSITE allows multiple publications to be hosted on the same server (computer), but to make different publications directly accessible to readers, you need to specify different virtual web servers. For example, if you want to add another publication (e.g. "Moldovan Contemporary Political Thought") onto the server on which you are hosting your "Prague Times" publication, you need to assign it a different virtual web server name (e.g. www.moldovanthought.com)]
If you have virtual hosts set up in your Apache configuration, you can start a new publication and specify the URL for this virtual host, which will then allow readers to access your publication through that address.]
2.2.2 Creating a new issue
Once you have successfully created your first publication, click on its name (e.g. "Prague Times"). This will lead you to the 'Add new issue option', on which you should duly click to proceed with the creation of the structure of your publication.
The options you will be presented with are 'Create a new structure' and 'Use the structure of the previous issue'. If you are creating a new publication from the ground up, the first option is your only real choice.
The second option will be the one to choose once you are ready to publish additional issues of your publication, because it allows you to automatically create a new issue with the same logical structure (sections) as the preceding one. Sections are created but are empty, so that you can begin to add articles immediately. You should possibly only change the name of the new issue, because it will otherwise remain the same as the last issue. The templates, however, are not copied, so the new issue must be linked to a template for the front page (see the NOTE below for more details).
You can introduce changes to the structure of the issue you just created, including adding or deleting sections or adding new article types, changing field choices within article types, etc.
[NOTE: If you are copying the structure of an old issue, you need to connect the new issue to a front-page template (see Section 3 of this manual). If you are not bent on changing the look of your publication, just select the old template; If you wish to alter the visual layout of your publication, you should select a new template that you have meanwhile created. Regardless of your choice, old issues will keep their original layout (unless you go back and change their template associations manually for each of them).
Whichever option you choose, that is to replicate the structure of the last issue or create a brand new structure, you will be able to change the name, the default language and the number of the issue.]
[TIP: While you can always go back and change the name and the default language of an issue at any time, the issue number cannot be changed once it is specified. If you are planning to add older issues of your newspaper/static-HTML site at a later stage to the same CAMPSITE publication, you may consider continuing the series. For example, if you just published issue 154 of the "Prague Times" in static HTML before moving to CAMPSITE, you could assign number 155 to the first issue you are creating within CAMPSITE.]
2.2.3 Adding new sections to an issue
By clicking on an issue, you will enter the Sections view in which you will have the option of adding new sections to the current issue by clicking on 'Add new section'. You should specify the name and section number (within the issue). While you can come back later and change the name of the section, the section number can be chosen only at the time when the new section is added.
2.2.4 Defining article types
The next step in setting up your publication is to define the types of articles that you intend to publish on your site. What you are actually doing at this stage is specifying the way articles will appear to the person who will be adding content to your publications. For example, a feature story is likely to have more components than a brief news item. To create an article type, click on 'Article types' and then select 'Add new article type'. First, you should pick a name for your article type (N.B. only letters are allowed, no spaces or special characters). Then you can start adding fields to the article type by clicking on 'New field' option (or proceed to add other article types by choosing 'Add another'). You will be requested to specify the name of the field (e.g. Author, Date, Deck, Body, Author, Biography -- remember no spaces or special characters are allowed!).
[TIP: Try to give intuitive names to your article types and fields within them, because chances are that you will not be the only person doing the publishing. For example, if you have an article type that you would like to use in your sports section, call it Sportsarticle, not Sp or Artic or anything equally cryptic. It will save you time and nerves when journalists and admin staff start doing all of the posting (and all of the consequent asking). Similarly, when creating an article type, try to make the sequence of fields logical, i.e. close to the way they will appear to the readers on the site (e.g. Author - Date -Deck - Articlebody - Bibliography). At this stage of development, CAMPSITE does not allow reordering of fields within article types.]
After you name the field, you have to specify its type. There are three options:
Text - this type of field can contain a maximum of 265 characters. It does not support HTML tags and it its appearance/formatting/character set is entirely determined by the template (see section 3 for more information on templates).
Date - this is a standard date field with a fixed syntax of YYYY-MM-DD
Body - this type of field can be up to 64KB in size (database space, however, is used optimally, as the database server adjusts the size on the disk to be sure the field fits, so there is no waste of space). More important, this type of field is edited with CAMPSITE's near-WYSIWYG Java editor -- CAMPFIRE. CAMPFIRE enables you to enter text in any character set, and even in multiple character sets. Text entered through CAMPFIRE is independent of the format and character set specified by the template. Moreover, CAMPFIRE allows you to insert images, links, and formatting tags, as well as special CAMPSITE Glossary tags (for more on Glossary, see section 2.3).
After you have specified the field type, you can keep on adding fields to the article type or finish the operation. Anytime later you can add more fields to the article type without affecting the rest of the application or the database contents. You will not lose articles if you add fields to their particular article type.
WARNING: While you can safely add article fields to a article types, deleting them may cause improper functioning of templates that refer to these fields. Article-type management is best left exclusively to expert users (e.g. administrators)
2.2.5 Creating articles within a section
Once you are in the Articles view within a section (you get there by clicking on a section name), you can create new articles by selecting the Add new article option. (This is a recursive option that allows you to add any given number of articles to the current section.)
Once you are in the Add new article view, you will see a dialog box with the following fields/options:
Name: This field is mandatory, because it determines how your article will be known to the database and appear in the Articles view. You, however, have the liberty of renaming the article at any time. Type: you have to select one of the available article types from the dropdown menu. The choice you make at this stage CANNOT be altered later.
Language: select the language in which you want to create your article from the dropdown menu. The list of languages will contain the languages you have defined in the Languages module (see section 2.1.1). The language choice you make at this stage is final, though you can always create a version in another language with the Translate option in the Articles view.
Show article on front page: Tick this box if you would like the article to be displayed on your publication's front (home) page. You can alter this choice at any time.
Show article on section page: Tick this box if you would like the article to be displayed on the main (home) page (a sort of a section homepage) of the section within you have created the article. You can alter this choice at any time.
Keywords: Specify the words that will help search engines find your article more easily. This field is optional and you can edit it at any stage.
After you fill out the required fields and make your article-display choices, you should press the 'Save changes' button. You will have the option to either edit the article you just created (press YES) or go back to the Articles view (press NO).
TECH NOTE: Name is the default field available for any article, no matter what type of article is selected. This was created both for testing purposes and for letting the webmaster/template designer define a default behavior of articles. For example, if a template doesn't provide a handler for a specific article type, or you don't know the list of fields of an article type, you can be sure that there is a field called 'name'.
2.2.6 Editing articles: Edit Article Details view
If you choose to edit your newly created article right away you will be led to the Edit Article Details view. This is the main article-editing interface, to which you will also get when you click on a name of any article in the Articles view. This view shows how the article is stored in the database. Its look will depend on the article type you have assigned to that article when you created it.
The fields you will see regardless of the type of article you are viewing are:
Name, containing the name you had given to the article when you created it. This field is editable.
Type, informs you which article type you had chosen for your article. You cannot alter this field
Uploaded, showing the date the article was added for the first time. You cannot change this field.
Keywords, where you can add or delete the words that describe your article better to search engines.
You will also see the two check boxes you saw when you created the article (Show article on front page and Show article on section page, respectively), plus another option: Allow users without subscriptions to view the article. You should tick the latter if you want to make your article visible to viewers who have not subscribed to your publication (for more on subscriptions, see section 2.5).
In addition to these system-determined fields and options, you may see any number and combination of different fields that you had made when you created a given article type.
Both text- and date-type fields can be edited directly in the Edit Article Details view.
WARNING: Whenever you edit text- and date-type fields, you have to press the 'Submit changes' button located at the bottom of the page, before leaving the Edit Article Details view. Moreover, date-type fields have a fixed syntax of YYYY-MM-DD. If you enter data in any other way, you may get incorrect results.
Body-type fields usually contain the bulk of an article's content (the main narrative part of the text, bibliographies, author biographies etc.). To edit them, you have to launch CAMPFIRE, CAMPSITE's Java editor. You can do so by clicking on the 'Edit' button near the left corner of each body-type field. You can edit one body-type field at a time.
Above the article structure, you will always see the following seven buttons:
Submit/Publish/Unpublish (depending on the copy-flow status of your article)
Images - lets you upload images that can be used within body-type fields of the article.
Topics - this is an advanced feature that lets you select from a list of topics and subtopics predefined by your CAMPSITE administrator or high-ranking editor (e.g. users with rights that correspond to the default Administrator or Chief Editor user types that come "out of the box" with CAMPSITE). Topics allow you to attach additional attributes to your article, which may be used by the aforementioned power users on your system to display articles in a certain way. If they have not decided to make use of this feature, you may ignore this button. For more information on topics, see section 2.4)
Unlock, which you can use to withdraw your reservation of the article (e.g. when you are finished with your editing). The unlocking is in principle done automatically, but since CAMPSITE is a server-based application accessed through web browsers, a number of events (computer crashes, line falling, etc.) could prevent this from happening.
Preview, which allows you to preview the article (see below for more detail)
Translate, which allows you to create a version of the article you are editing in another language.
Delete, which is self-explanatory
2.2.7 Editing body-type fields: Working with CAMPFIRE
CAMPFIRE allows contributors (journalists or editors) without any technical or HTML knowledge to perform extensive formatting procedures.
Chances are that anyone who has ever worked with a text editor should find CAMPFIRE intuitive to use. CAMPFIRE features a toolbar with buttons from which main functions can be performed, while additional features can be accessed from pull-down menus.
All text-formatting features are fully WYSIWYG, except align justify. The non-WYSIWYG features are insertion of images, subheads/page breaks and CAMPSITE Glossary keywords (see section 2.3).
From left to right on the toolbar, in order of appearance, the buttons are:
New - clears the editor;
Save - which saves the article field that is being edited
Preview - allows you to preview the whole article, not just the field you are editing
Cut
Copy
Paste
Undo
Redo
Bold
Italic
Underline
Align left
Align center
Align right
Insert image - inserts an image placeholder into the text. When you click on it, you are prompted to select one of the images you previously uploaded for that particular article. You can also specify the alignment (none, left, right, centered), alt text (the text that shows up when you go over an image with a mouse within a browser), and the caption for that will appear under the image..
Insert subhead allows subheads in your text to become page breaks. This command inserts a code around the subhead you select, which the parser will interpret as a page break and parse the subhead on a new page (N.B. This feature has to be enabled in your templates; see Part 3 of this manual for more details).
Internal link button allows you to create links to other articles that you have already created within CAMPSITE. The actual procedure is analogous to the one with external links.
External link allows you to create an absolute link in the text. You do so by highlighting (selecting) the segment of the text that you would like to link to a web page (URL) of your choice and clicking on the External link button. This will invoke a popup window that will prompt you to provide the URL and you can specify where you want the link to open (e.g. a new window). (N.B. you can use this feature to create mailto links as well).
All of these functions are also available from the dropdown menus. The menus four five important extra options:
Glossary keywords
Font color
Font size, which is self-explanatory
Clear all attributes (which clears all formatting and links from the selected text)

NOTE: CAMPFIRE only handles left, right, and centered alignment, because current browsers do not treat consistently the <JUSTIFY> option, so if you would like to have your articles justified, your teplate designer should specify that in your publication's article templates.
2.2.7.1 The Preview function
Through CAMPFIRE, contributors can feed information into CAMPSITE's database. The layout of the article for the general audience, however, will most probably different than what you see as a contributor. The layout that readers will ultimately see when they visit your web site is controlled by templates, which are described in more detail in Part 3 of this manual.
[NOTE: the preview function only works once you saved (uploaded) the text form the CAMPFIRE editor, because the preview will display the most recent material in the database.]
To use the preview function you need to have the templates created and properly configured, as they are displaying the information from the database to the readers, adding additional layout (navigation, banners, etc.) on the way. If, for example, you have used CAMPFIRE to add information in the field 'biography', but the template does not include the 'biography' in the final layout, the preview function will not display this information.
2.2.7.2 Previewing article and publication layouts
To be able to preview article and publication layouts, go to the issues view and select the appropriate front-page and single-article templates (your template designer should have designed and uploaded these after having gone through the section 3 of this manual) 
The front-page layout depends on a special stand-alone template that can be changed independently. All changes to the template can be previewed as soon as the template has been uploaded.
Individual articles can be previewed from the 'Articles' area. Simply click 'Preview' to open an extra window with the page your readers/site visitors will be seeing.
NOTE: At the bottom of the preview window, you can see information about the parser. If any problems occur while generating the web pages, the CAMPSITE parser will display error messages. These should help you to identify the problem in the template structure.
2.2.8 Publishing articles
CAMPSITE's copy-flow control feature operates by means of assigning three statuses to an article: 
- new
- submitted
- published
When you create an article, it is set to 'New'. If you change the status to 'Submit', then - via email - the editors will be informed to check the new submission. Editors will also be informed on new submissions when they login into CAMPSITE. Once the editors are happy with the way the article reads and appears, they can alter its status to 'Published'. It is only then article becomes visible on your web site (provided that you have previously published the relevant issue of your publication).
The whole process is fully reversible, so you can unpublish articles (or even change their status to 'new') on your site as easily as you can publish them.
NOTE: Only authorized users are allowed to publish articles, so you may not be able to access that option if your administrator has not granted you such rights.
2.2.9 Setting the finalized publication live
All the above functions, such as adding articles, editing, previewing, can be done internally, without any material being available to the public.
Once you decide that the time (or the deadline) has come to bring the new material online, you need to change the status of the issue, by selecting the 'Publish' option from the Issues view. In addition, you can set the 'Published' flag on or off for each article, hiding it, if necessary, even if the issue is already published.
2.3. Glossary
The Glossary is in our view one of the two insufficiently developed but fully funcitonal and potentially powerful features of CAMPSITE (the other one is Topics, of which more in section 2.4). For this reason, Glossary-related rights are unchecked from all default users (including the default administrator) or user types. If you would like to try your luck with the Glossary, you would need to return those rights to the users you configure on your system (you've learned how to do that in section 2.1.4). This action will make Glossary functions visible to those users. So that was the caveat. On to the functionality.
Glossary allows you to create and globally update short pieces of additional information for specific words. For example, some background information on a company or a person might be saved in the Glossary. In any article where this company or person is marked as a keyword, a link will be displayed, leading to additional information. To update this information, the editor only needs to go into the Glossary and update the information there. All changes will happen globally for the entire publication, including back issues.
Depending on the context within which these keywords appear, different types of information can be saved separately. It might, for example, be interesting to know more about the location of a company in one context, in another case it might be crucial to know who is running it. To make such distinctions, the Glossary module features 'Infotypes' (which is the best word we could come up with as a short form for types of information), which can be chosen to be displayed. 
For example, I might decide to mark the name of a person in a political analysis as a keyword. And in this particular context, I wish to have a description of the political career as additional information (as opposed to the past three marriages, which might be interesting in another context). So I need to enter the person's name (e.g. Helmut Kohl) as a keyword in the Glossary. Later, while writing the article, I can mark Helmut Kohl as a keyword, and then assign the appropriate infotype (e.g. 'private life' or 'political career') to that incidence of 'Helmut Kohl' in the text.
To make use of the Glossary function in your daily editing, you need to do the following:
- define keywords (e.g. Helmut Kohl)
- create the related Infotypes (e.g. Love Life, Career, Hobbies)
Once these steps have been taken, you will be able to mark different incidences of the keywords within CAMPFIRE. Later, when displaying the article, the parser will search the Glossary database for related entries. If such an entry is found, the parser will include a link, allowing the reader to access the additional explanation. If no such entry is found, the word is displayed regularly (i.e. no link is displayed).
Changes to the Glossary can be introduced at any time and will be dynamically included in the display. The marked keyword will always trigger the parser to search through the current version of the Glossary and display the most up to date information.
2.3.1 Creating 'Glossary Infotypes'
From the Home view, select 'Glossary Infotypes' where you can add new Infotypes. Here you can also translate the Infotypes into any of the languages defined in CAMPSITE (see section 2.1.1).
2.3.2 Adding keywords to the Glossary
Choose Glossary from the navigation bar on the left, then select 'Add new keyword'. You will be prompted to type the keyword and specify the language. When finished, the keyword will appear in the list of keywords. Now you have to assign an infotype to the keyword. Choose 'Infotypes' in the same line as the keyword to see all available Infotypes. Mark the one you want to associate the keyword with and click 'Done'. You can repeat this process to associate the keyword with more than one infotype.
You can also translate the keyword into other languages. This will generate a new keyword in the listing, using the same Infotypes.
2.3.3 Marking keywords in the articles
When writing or editing material in the CAMPFIRE editor, you select the word you want to make a keyword, choose 'Insert' from the pull-down menu and 'Create Keyword'. This will open a window, asking you to choose an Infotype to be associated with the keyword.
The marked keyword will not necessarily become an active link in the article. This will only happen if the same word has been defined as a keyword, as described above. Only then the parser will find the word in the keyword list and build the link, opening the pop-up window with further information.
2.3.4 What pays the piper, will see the surfer
As the parser is going through the text, it will first find the marked keyword, then check in the Glossary if such a word has been defined. If this is the case, the parser will generate a link, opening a popup window, displaying the information of the infotype that the journalist has selected for this particular instance of the keyword in the text. The other Infotypes are also offered as further reading.
If the parser detects a keyword, but can not find the same word in the Glossary entry, no link will appear. However, once this keyword is added to the Glossary, the parser will generate a link. Marked keywords are like sleeping beauties.
2.3.5 Known Limitations of the Glossary Module
In its present incarnation (CAMPSITE version 2.1), Glossary is functional, but its appearance is still, shall we say, rather sobering. We thus consider it as a feature under development, particularly regarding the lack of possibility for CAMPSITE administrators to alter the layout of the popup windows. In other words, you can use it, but you might want to see if the appearance of the pop-up window would not strongly conflict with your overall design. If you like the Glossary's promise and would like to further its development, please let us knowat contact@campware.org. We will fix in the coming versions, but if you can't wait, financial and in-kind contributions are more than welcome.
2.4. Topics
The Topics were introduced into CAMPSITE to add another level of freedom to the web designer/producer in site design. The projected topic features will enable designers to make portal-like, crosslinked sites, as any topics can be subtopic of more different topics.
In plain English, topics are subject matters of articles. A topic can have subtopics, like: the sports topic can have football, basketball, and waterpolo as subtopics. An article may have several topics attached to it, so that the article can be displayed in certain article lists.
2.4.1 Known limitations of Topics
At present, the Topics user interface is admittedly counterintuitive for the end user (journalist/editor). Next versions of CAMPSITE will have this sorted out.
2.5. Configuring the Subscription Module
CAMPSITE allows you to control access to your site in two ways:
Standard UserName:Password pairs, which is suitable for individual users;
IP Address access, which most institutional subscribers (libraries, universities, NGOs, companies, etc.) tend to prefer
As CAMPSITE handles subscriptions at publication level, all subscription-related variables are customizable from the Publications view. Columns 'Subscription default time' and 'Info' are relevant in this context.
The 'Subscription default time' parameter allows you to set default trial-subscription duration (Trial time) and the default duration of paid subscription (Paid time) for individual countries. To do so, click on Change in the 'Subscription default time' column. You will then have the option to Add new country, i.e. create subscription preferences for a given country.
If you click on Change in the 'Info' column, you will be able to specify the remainder of subscription parameters for your publication:
Pay Time - specifies the time within which the user has to pay for his subscription (in the meantime, he has immediate access to the site);
Time-unit - specifies the time unit you would like to use to measure the duration of subscriptions; you can select day, week, month, or year;
Unit cost - the price for a section for the selected time unit;
Currency - the publication's currency. Even if the subscription request is sent and the currency is changed meanwhile, the information about the user's debt is correctly recorded.
2.5.1 Username:Password Access
CAMPSITE allows readers to subscribe to one publication at a time. Within a publication itself, the level of subscription is the section. The reader is able to select any section from the list of the publication's sections, and for each of them specify the period of time he would like to have a subscription for.
Before submitting his request, the user (reader) can evaluate the cost of the subscription and change it. At any time later, he can subscribe to additional sections. Once the user has subscribed to a section, he can't increase the period of time for the subscription until payment is done for that section.
Immediately after the completion of the subscription form, the reader has the right to view the site. By default, the reader has seven days to make a payment and have his subscription confirmed by the administrator or else the account is locked.
The authorized person can confirm the payment, so that the subscription remains active after the first 7 days. There are two options in the administration module for that: change the value of the amount that the subscriber has to pay, or change the number of days the subscriber is allowed to surf the publication's site. By default, if this sum is set to 0 (zero), the number of paid days is automatically set to the number of requested days.
The administrator (or any other user whose profile allows him to manage publications) has 7 days to confirm the payment. The confirmation is made from the main menu, by selecting User and then Subscriptions. The confirmation consists in changing the payment status (from 'no' to 'yes').
2.5.2 Customizing Subscription Interface for Readers
The subscription interface for the user is customizable. Depending on the user's status, several steps must be taken by a user in order to be able to read the publication. There are three possible scenarios:
the user has never subscribed; the user is served a subscription form (name, login, password, email etc); after the completion of this form, the user can start subscribing to any section
the user has already subscribed (i.e. is a known user to the system) but only to a few sections, and he wants to add more sections to the subscriptions he has already made, which might have expired; the user should be served a different subscription form (reflecting his status of a known user)
the user is not known to the system even though his subscriptions are active (e.g. the subscriber hasn't logged for a long time, even if his subscriptions are active; a login form must be supplied for such a user.
Template designer can customize all those forms by means of CAMPSITE's description language (see Part 3 of this manual).
2.5.3 IP Address-based Subscriptions
Subscriptions can also be created through the administration interface. This is normally done for two purposes:
First, an administrator needs to be able to emulate the experience of a regular user in order to test the functionality. So he must be able to create a user identities with reading rights only.
Second, IP address-based subscription has to be fully controlled by the administrator, as a reader could possibly grant access for 7 days for the whole Internet.
To create an IP address-based subscription, the administrator first creates a regular UserId:Password account, to which then he adds IP based rights. The double authorization option was implemented because the administrator can't test the subscription from his computer if only the IP address-based authentication is active. He must enter in a different way (UserId:Password) and rights must be assigned as if he were coming from an appropriate IP address. It is not necessary to add anything to the templates or to inform the users who will be accessing the site through IP address authentication of the existence of this UserId:Password pair.
3. CREATING TEMPLATES FOR YOUR PUBLICATION
When implementing CAMPSITE, chances are you will already have a rather clear outline of the structure of your publication online, or - even better - have a running web version already in HTML. Either way, to migrate your publication to CAMPSITE, you will have to generate customized templates for your content. Such templates will be incorporating the CAMPSITE tags used to pull information from the database into the HTML page readable by web browsers.
The following sections will guide you step by step through the process of generating such templates. Before proceeding (step 0 if you like) would be the actual planning and layout work of your web site. This can be done with any HTML editor of your choice. However, the following will cover the transformation of an existing HTML design into templates and NOT web design itself... this isn't web design lecture.
One of the main goals of CAMPSITE is to offer a fully customizable layout for online publications and at the same time keep the content independent of the layout. This is done by means of templates. Those templates are nothing more than HTML files containing embedded CAMPSITE description-language tags, which creates the link between the view and the content.
3.1. Modular Structure of Templates
A glance at all articles of an online publication reveals that generally there are many layout similarities even across different sections of the publication. Taking advantage of such similarities is what the template structure of CAMPSITE was meant to do. In other words: design features that remain the same for all articles only need to be specified once, e.g. the navigation from an article back to section and home, font type and size, background color and the like.
On the other hand, there are article components that vary between articles. For example, the top of the article might contain some specific logo to indicate which section it belongs to. In such a case, the templates are designed to work in a modular fashion, allowing you to call up templates within templates.
The modular structure of the templates can be illustrated well by the following example: If background color, font size and type are the same for all articles, they will be specified as plain HTML in the template. But differences between sections will be indicated within the structure of the template (see below) indicating "if this article belongs to the politics section, insert such-and-such template here, if it is sports, insert such-and-such, else: just use the following."
Templates can be stacked within each other. A template can be made to call another template and include the layout information at the position where it was called in the main template. The easiest way to illustrate this modular structure is by looking at a usual tree structure of folders on a computer. Starting from general categories, the deeper the structure, the more precise and specific the folder names and information.
The modular structure was introduced to keep redundancy to zero and therefore the layout work minimal. Any design changes need to be made only once in the templates, never even twice, if you make full use of this modularity potential.
3.2. Fixed Framework: Communicating with Your Database
Templates are in-between your content database and your audience on the web. Therefore they need to mediate between both. The database needs to understand what information is requested, and the user's browser needs to retrieve a finished HTML page.
The template sets the stage, passing specific environmental information to the database query, such as: "list only articles from current issue and section 'sports'." At the same time, it gives detailed instructions on how content should be displayed in HTML format. This distinction between environment and content is crucial for understanding and building templates. The template language was designed to be usable on different levels of dynamic features: one can make static templates for every issue, section, article or just a few customized templates that generate different views depending on the given parameters.
The following will cover some examples on how to build templates. Further down you can find a complete list of available commands used by CAMPSITE templates.
3.3. Building an article template: articletemplate.tpl
Building an article template is the easiest option. All you need to do is generate your HTML layout and substitute the dynamic sections (title, author, intro, text...) with the simple tag:
<!** print article title>
The command is 'print article'; the 'title' part varies. This is the name of the variable that you assigned when building the Article Types. So it could also read:
<!** print article sportsitemdeck>
As the rest of the HTML layout remains as it is, a simple template might look like this:
<html><title><!** print article title></title></head>
<body>
<h1><!** print article title></h1>
<h3><!** print article subtitle></h3>
<i>Written by <!** print article authorname> on the <!**print article date></i><p>
<!** print article text>
</body>
</html>
The reason we can reduce the templates to such a simple solution is, because CAMPSITE will remember where it comes from and where it is. So by the time the user arrives at one particular article, CAMPSITE knows the publication, the issue, the section, and even the article ID and can simply generate the HTML page from the database by using the environmental variables together with the layout information in the template.
Obviously, your design can be far more advanced than this page. And CAMPSITE can also perform far more advanced functions than this. In order to get a feel for this, let's jump into the next example, building the navigation. (A full list of tag commands can be found at the end of this chapter.)
3.4. Generating a Navigation Template: navigationtemplate.tpl
As described above, the template structure can be nested, meaning one template can call another template. This, for example, makes a lot of sense for the navigation. To jump between sections, you might only need one navigation template that can be used by all other templates (article, section, home page). 
To nest another template within another, use the following CAMPSITE tag:
<!** include navigationtemplate.tpl>
The 'include' command is CAMPSITE lingo; the name of the template needs to be adjusted to whatever you called it. Let's assume we add this tag in the article template we created earlier, and we can now go on and build the template.
First thing to do when you are building something like the navigation is to take control over the environmental variables. Our navigation needs to follow some standard rules and should not be affected too much by the environmental setting of the current position of the user.
In terms of CAMPSITE lingo, we need to introduce a 'local' tag, which allows us to specify some environmental variables for a local section inside the template. In other words, we can switch off the environmental variables, set our own and then switch them on again. In that way we can use the same template for the navigation for all articles, sections, even issues (not publications, obviously).
In order to make sure you enter the current issue in the navigation bar, set the environment variables to:
<!** local><!** issue current>
Here, 'local' allows you to set the parameters inside a template to the values you want to be specified. Once the parser finds the 'endlocal' tag, it will switch back to the environment variables it arrived with (for example a back issue).
Then the issue parameter is set to 'current'. This is done in order to make sure that the navigation will always jump to the 'section' (or whatever you want) of the current issue.
Then you would need to specify which section you would want to link to. This is done with the 'section number' tag.
<!** section number 1>
The above tag would set the local section parameter to 1, which will be looked up in the CAMPSITE database under section entries (each section is assigned a number when it is created, see section 2.2.3 of this manual).
Now we have set all necessary values for the link: we will link to section 1 in the current issue. All we need to do now is create the link to the section, or - to be more precise - the template that is used to build section pages.
<a href="sectiontemplate.tpl?<!** urlparameters>">NEWS</a>
This will create an ordinary link, using the anchor tag of HTML. This link will call the sectiontemplate.tpl (you need to substitute sectiontemplate.tpl with your template name). In our example, all templates are in the same folder. If they are in a different folder, you can use a relative link (e.g. look/reporter/logo.gif).
Then we need to pass the parameters to the template, which allows the parser to fill the page with content from the database. So the template is followed by '?' (indicating that other variables are following) and then the CAMPSITE tag 'urlparameters' will include all the information (such as language, publication, etc.) but using the local settings we adjusted earlier (current issue and section 1). Finally, we need to end the local parameters with the tag:
<!** endlocal>
A complete navigation template could look like this:
<!** local><!** issue current><!** section number 1>
<a href="sectiontemplate.tpl?<!** urlparameters>">NEWS</a><br>
<!** endlocal>
<!** local><!** issue current><!** section number 2>
<a href="sectiontemplate.tpl?<!** urlparameters>">POLITICS</a><br>
<!** endlocal>
<!** local><!** issue current><!** section number 3>
<a href="sectiontemplate.tpl?<!** urlparameters>">SPORT</a><br>
<!** endlocal>
<!** local><!** issue current><!** section number 4>
<a href="sectiontemplate.tpl?<!** urlparameters>">CULTURE</a><br>
<!** endlocal>
<!** local><!** issue current><!** section number 5>
<a href="sectiontemplate.tpl?<!** urlparameters>">WEATHER</a><br>
<!** endlocal>
Make sure that the section numbers assigned correlate with the names of the sections, as you assigned them when building the publication in the first place.
Now we can advance into a more conditional environment, the section pages.
3.5. Building the Section Template: sectiontemplate.tpl
The main function of the section page is to provide a table of content for all articles in a section. Each section needs to have its own sectiontemplate.tpl specified. However, you can use one general section template, which will then call different sub-templates, depending on the environmental variables as described above. For example, you can have a different navigations for the sports and the politics sections.
As mentioned before, the main aim of the sectiontemplate.tpl is the listing of all articles in this section, for this issue (and this publication). A very simple list could look like this:
<!** list article>
<a href="articletemplate.tpl?<!** urlparameters>"><!** print article name></a>
<!** endlist>
This will list all articles in the section. Remember that CAMPSITE will pass on its own environment variables, such as 'publication' and 'issue', to each template. The 'list article' command already knows what section to list. The second line will create the link, using the name of the article. 
Here you can add more information, using the 'print article' command. If you say:
<font size=-1><i><!** print article deck></i></font><hr>
... this will include the 'deck' component (field) of the article, in a smaller font and italics. All HTML remains just the way you always use it. Finally, a line (horizontal rule) is drawn underneath the deck.
To close the listing, use the 'endlist' tag.
This example will order the articles in no particular way. If you want to make sure the newest article is on the top of the list, you need to tell CAMPSITE to order the listing:
<!** list article order bynumber desc>
3.5.1 The 'Feature' article of the section
Most likely, one or more articles are the main (feature) articles in each section. (Editors mark those articles as such by ticking the Show on section page box in Edit Article Details view; for more details see section 2.2.6) What we will do now, is build a listing for the section template, which will display the feature articles (marked with 'show on section page') first and then list the remaining articles.
<!** list article onsection is on order bynumber desc>
This will make sure that the only articles that will be used which have this feature switched on. They are also ordered by descending numbers, with the newest appearing on the top. This is followed by the variables you want to have listed and the HTML formatting used. In our example it may look like this:
<a href="articletemplate.tpl?<!** urlparameters>"><!** print article name></a>
We can then add more information from the database with the 'print article' command. HTML code goes in-between.
<!** end list>
Then we need to end the listing with the 'end list' command. So here we will list all the ones which are marked. But what if the editors checked more than one article, but your design only works with ONE article on the top, not all of them? 
3.5.2 Displaying only the most recent feature article on a section page
To use just the most recent article from the 'feature' articles in the section, use the following tag:
<!** list length 1 article onsection is on order bynumber desc>
<a href="articletemplate.tpl?<!** urlparameters>"><!** print article name></a>
<!** end list>
This will create a list of articles (in our case only one, as the length is set to 1) of the articles marked as 'show on section'. The list will be ordered by descending numbers, the highest entry being featured on the top. As set in this example, this will result in only the most recent entry of "feature" articles within the section being shown.
A link is then created, containing the name of the article (which is the title).
WARNING: If you have built your list in the way described above, only the first article is included. Imagine you have three or four articles checked to 'show on section page', all but the most recent one will be swallowed. This might make sense in some cases, but it might be problematic for other designs.
It might be better to make sure that we are printing the most recent marked one, then the other marked ones and finally the normal articles in the section. So we will keep the first command for our feature article in the section. Then we need to make a list of all articles that are also checked to be 'on section page'. But we need to exclude article number one.
<** list article onsection is on order bynumber desc>
<!** if list index 1><!** else>
...
<!** endif>
<!** endlist>
This will build the list of all checked articles in the section. It will then look at the index of each article, once it has ordered them. So the newest article will have the index number one. The if condition will find this article and do nothing - because - it runs straight into the 'else' area. Above, where you can see the three dots, you can add your own listing, using the normal 'print article' tag and your HTML code.
Finally, all we need to do is list the remaining articles. That's an easy task--simply exclude the marked ones and list the rest. There you go:
<** list article onsection is off order bynumber desc>
...
<!** endlist>
Again, include your HTML with the other variables in-between.
3.5.3 Including Images in the Section Listing
As seen above, the sectiontemplate.tpl will always pull information out of the database and display it in a list format. If we have images included in the article, they will appear on the article page, but how can we display an individual, small image for one article in the section listing?
The answer is quite simple. Create a body field in your Article Type that will only contain the image that goes into the section listing. Let's say we call this variable 'sectionimage'. Then all you need to add in the section listing to display the image is:
<!** print article sectionimage>
This will then generate the HTML code as saved in the database. And in our case that means it will create the image tag including the image. You could even generate a little subtitle for the image in this field when entering the article text and images.
3.6. Building the home page template: home.tpl
...is more or less the same, just needs some more practice, so this is your chance to practice...
3.7. Some hints: powerful lists and ordering
Listing and ordering are two powerful functions in CAMPSITE lingo. In the following example we would like to automate an update for the sections 3, 4 and 5. Whenever an editor posts some new articles in either of these sections and publishes them, we want the home page to display a link to the newest article in the center column. Also, we want the second newest posting to be listed in the left column.
In order to achieve this, our home page template needs to select sections 3, 4 and 5, then order them from newest to oldest and take the top entry for the center and the second one for the left column.
What do we need to do?
<!** list length 3 section number greater 2>
This will select the sections 3, 4, and 5.
<!** list length 1 article order bynumber desc>
This line orders the entries from newest to oldest and only returns the newest article, because the length of the list is set to one. 
<!** print section name>
<!** print article title>
...to print the most recent for each section.
<!** endlist>
<!** endlist>
... to close the list again.
So, now we need to take the second articles for each section to go into the column on the left. This can be done similar to the example above:
<!** list length 3 section number greater 2>
<!** list length 2 article order bynumber desc>
<!** if list index 1><!** else>
<!** print section name>
<!** print article title>
<!** endlist>
<!** endlist>
3.8. Environmental control with CAMPSITE templates
Instructions within CAMPSITE lingo fall into two categories: those that do not generate output but only select the environment for the rest of the instructions, and those that print a certain information from the database according to the environment set by the first type of instructions.
3.8.1 Runtime parameters
The information selected also depends on the runtime parameters. These parameters are:
language identifier (IdLang) which sets the current language 
publication identifier (IdPubl) which sets the current publication 
issue number (NrIssue) which sets the current issue 
section number (NrSection) which sets the current section 
article number (NrArticle) which sets the article 
3.8.2 Other parameters
and also some special parameters:
the keywords parameter, which specifies that keywords will be used as filters in a List SearchResult statement; it is used for the local search engine 
a list index start, that specifies the starting index for a each type of list: Issue (ILStart), Section (SLStart), Article (ALStart), Article search (SRLstart) 
All runtime parameters form the so-called "data context" within which each article is positioned.
3.9. Structure of CAMPSITE templates
The structure of the CAMPSITE templates is simple. It is a continuous row of either HTML language or the commands used by CAMPSITE to pull content out of the database. Any template in its most simplified form looks like this:
[HTML text] [CAMPSITE Instruction] [HTML text ] [CAMPSITE Instruction] ....
The following example is an HTML beginning of a CAMPSITE template. In general, the best way to go about making templates is to finish the HTML layout work, then identify the chunks that do not need any changes and insert CAMPSITE tags in-between to customize the layout.
<html><body><h1>template 1</h1></body></html>
This template does not contain CAMPSITE Instructions. Taking this example a little bit further, the above example could be asked to display the day of the month.
<html><body> <!** Date mday> </body></html>
This template is made of:
HTML text: <html><body> 
CAMPSITE Instruction: <!** Date mday> 
HTML text: </body></html>
... and will print the day of the month (numeric) for the current date. You can see the most important format standard that will follow all work through the pages to come, the CAMPSITE tag. Requests to CAMPSITE to replace a part of the template with information from the database is always inside the <!** > tag.
Template 3:
<html><body>
<!** List Article OnFrontPage Is On>
<p> Article Name <!** Print Article name>
<!** EndList>
</body></html>
This template is made of:
HTML text
<html><body>
CAMPSITE Instruction
<!** List Article OnFrontPage Is On>
HTML text
<p> Article Name 
CAMPSITE Instruction
<!** Print Article name> 
CAMPSITE Instruction
<!** EndList>
HTML text
</body></html>
... and will print the names of articles that are on the front page, no matter if they are protected or not by the subscription system.
Beware that depending on the given runtime parameters this template will print different information. For example, if only NrIssue parameter is specified, this template will select all articles to be shown on the front page, for the given issue number, for all publications.
3.9.1 Language Elements. Conventions
In the following subchapters describing the template language we used the following conventions:
identifiers in between '<' and '>' must be replaced in the template according to their description
spaces must be used as in the language description
attributes names and values must not contain '"' and tab characters
identifiers that are not in between '<' and '>' are language keywords and must be written as in the language description
any language identifier can be written in between '"' character; identifiers containing spaces and must be written in between '"'
identifiers enclosed by '[' and ']' characters are not mandatory in the statement
sequences of identifiers separated by '|' character describe a situation where all the identifiers are valid but only one can be used at a time
The template language is composed out of:
statements: they are keywords with a special meaning that define actions taken by template parser; click here for a list of statements
attributes: are keywords describing statement features; they are used to specify statement constraints
operators: are keywords used in specifying constraints (comparison expressions)
Constraints are built in one of the following ways:
comparison expressions: <attribute> <operator> <value>
list of values: <attribute> <value_list>
attributes without type: <attribute>
Attributes may have no type or one of the following types:
integer: signed, 10 digits number
string of characters: may contain any character except '"'
switch: has two values: "on" and "off"
date: year, month, day; where date value is specified it must be written in "yyyy-mm-dd" format
time: hour, minute, second; where time value is specified it must be written in "hh:mm:ss" format
datetime: year, month, day, hour, minute, second; where datetime value is specified it must be written in "yyyy-mm-dd hh:mm:ss" format
topic: list of names defined by the application user used for categorizing articles
Every type has a list of valid operators that can be used on attributes of that certain type. The operators list corresponding to defined types:
integer: <integer_operator> = is | not | greater | greater_equal | smaller | smaller_equal
string of characters: <string_operator> = is | not | greater | greater_equal | smaller | smaller_equal
switch: <switch_operator> = is | not
date: <date_operator> = is | not | greater | greater_equal | smaller | smaller_equal
time: <time_operator> = is | not | greater | greater_equal | smaller | smaller_equal
datetime: <datetime_operator> = is | not | greater | greater_equal | smaller | smaller_equal
topic: <topic_operator> = is | not
3.9.2 'Define-environment' instructions
'Define-environment' instructions modify the runtime environment by changing one or more variables of it.
3.9.2.1 Language
Purpose:
Sets the runtime environment language to the one selected by English name. From this statement on the language is the new chosen one. If the name supplied is not a valid one, this variable is not modified.
Syntax:
Language <language_name>
where
<language_name> is the English name of selected language.
Constraints:
Can not be used inside any List statement.
3.9.2.2 Publication
Purpose:
Sets the runtime environment publication to the one selected by the statement constraint. If the statement constraint is not valid the publication is not changed.
Syntax:
Publication name <publication_name>
Select the publication having the specified name. If the name supplied is not a valid one, this parameter is not modified. WARNING!!! If the publication name contains spaces and/or tabs you must enclose it in between "".
Publication identifier <publication_identifier>
Select the publication having the specified identifier. The publication identifier is a unique number associated to the publication and is supplied by the administration interface.
Publication off
Deselect publication; the publication parameter is not defined after this instruction.
Publication default
The publication parameter is changed to the one provided on template start. If publication parameter was not defined on template start it's value from now on is undefined.
Constraints:
Cannot be used inside any List statement.
3.9.2.3 Issue
Purpose:
Sets the runtime environment issue to the one selected by the statement constraint. If the statement constraint is not valid the issue is not changed.
Syntax:
Issue number <issue_number>
Select the Issue having the specified number. If number supplied is not valid this parameter is not changed.
Issue current
Select the current issue (the last published issue).
Issue off
Deselect Issue; the issue parameter is not defined after this instruction.
Issue default
The issue parameter is changed to the one provided on template start. If issue parameter was not defined on template start it's value from now on is undefined.
Constraints:
Cannot be used inside any List statement.
3.9.2.4 Section
Purpose:
Sets the runtime environment section to the one selected by the statement constraint. If the statement constraint is not valid the section is not changed.
Syntax:
Section name <section_name>
Select the section having the specified name; this has to be written in the language of the context. If the name supplied is not a valid one, this parameter is not modified.
Section number <section_number>
Select the section having the specified number; this is not dependent on context language. If the number supplied is not a valid one, this parameter is not modified.
Section off
Deselect Section; this is not defined after this instruction.
Section default
The Section selected is the one provided by the parameter from template start. If this parameter was not defined on template start it's value from now on is undefined.
Constraints:
It can't be used inside "List Section" and "List Article" statements.
3.9.2.5 Article
Purpose:
Sets the runtime environment section to the one selected by the statement constraint. If the statement constraint is not valid the section is not changed.
Syntax:
Article name <article_name>
Select the article having the specified name. If the supplied name is not a valid one, this parameter is not modified.
Article off
Deselect Article; the Article is not defined after this instruction.
Article default
The article selected is the one provided by the parameter from template start. If this parameter was not defined on template start it's value from now on is undefined.
Constraints:
Cannot be used inside "List Article" statement.
3.9.2.6 Local
Purpose:
Creating a temporary data context block for special conditions; the previous data context is restored outside the block.
Syntax:
Local
<list_of_instructions>
EndLocal
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3 Flow control instructions
3.9.3.1 List of Issues
Purpose:
Select the list of issues according to the given constraints and current environmental parameters. The Publication, Language, Issue parameters may not be defined outside List Issue statement; inside the statement however, all these parameters are defined. The code between "List ... Article ..." statement and "ForEmptyList" (if used) or "EndList" is repeated for every article in the list. When the list of article is empty the code in between "ForEmptyList" and "EndList" is executed once.
Syntax:
List [length <integer_value>] [columns <integer_value>] 
     Issue [<list_of_issue_constraints>] [order <order_condition>]
<list_of_instructions>
[ForEmptyList [<list_of_instructions>]]
EndList [Issue]
where
length <integer_value> where <integer_value> specifies list_length forces the list to have at most list_length items. If the list contains more items than list_length items the ones not fitting in can be listed using If NextItems/PreviousItems statements.
columns <integer_value> where <integer_value> specifies columns_number sets an environment variable. This is incremented as if the items would be placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very usefull in building tables of data. For details see If List.
<list_of_instructions> may contain any statement except: "Language", "Publication", "List Issue", "Issue". 
<list_of_issue_constraints> =
[<issue_constraint>] <list_of_issue_constraints> 
| <issue_constraint>
<issue_constraint> =
number <integer_operator> <integer_value> 
|name <string_operator> <string_value> 
|publish_date <date_operator> <date_value> 
|<date_constraint>
<date_constraint> =
year <integer_operator> <integer_value> 
|mon_nr <integer_operator> <integer_value> 
|mday <integer_operator> <integer_value> 
|yday <integer_operator> <integer_value> 
|wday_nr <integer_operator> <integer_value> 
|hour <integer_operator> <integer_value> 
|min <integer_operator> <integer_value> 
|sec <integer_operator> <integer_value>
<order_condition> =
bydate desc|asc 
|bynumber desc|asc
where year stands for year, mon_nr for month number (1..12), mday for month day (1..31), yday for year day (1..365), wday for week day (1..7), hour for hour, min for minute and sec for second.
Any parameter used in <list_of_issue_constraints> can only be used once.
Inside the List the following environment variables are modified: 
language: if not defined before list start 
publication: if not defined before list start 
issue 
The environment is restored after the list ends.
Constraints:
Inside List Issue the following statements are forbidden:
Language 
Publication 
List Issue 
Issue 
List Issue statement can not be used inside List Section, List Article, List Subtittle, List SearchResults statements.
3.9.3.2 List of Sections
Purpose:
Select the list of sections according to the given constraints and current environmental parameters. The Publication, Language, Issue, Section parameters may not be defined outside List Section statement; inside the statement however, all these parameters are defined. The code between "List .. Article.. " statement and "ForEmptyList" (if used) or "EndList" is repeated for every article in the list. When the list of article is empty the code in between "ForEmptyList" and "EndList" is executed once.
Syntax:
List [length <integer_value>] [column <integer_value>] 
     Section [<list_of_section_constraints>] <list_of_instructions> 
[ForEmptyList [<list_of_instructions>]]
EndList [Section]
where
length <integer_value> where <integer_value> specifies list_length forces the list to have at most list_length items. If the list contains more items than list_length items the ones not fitting in can be listed using If NextItems/PreviousItems statements. 
columns <integer_value> where <integer_value> specifies columns_number sets an environment variable. This is incremented as if the items would be placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very usefull in building tables of data. For details see If List. 
<list_of_instructions> may contain any statement except: "Language", "Publication", "List Issue", "Issue", "List Section", "Section". 
<list_of_section_constraints> =
[<section_constraint>] <list_of_section_constraints> 
| <section_constraint>
<section_constraint> = 
name <string_operator> <string_value> 
| number <integer_operator> <integer_value>
Any parameter used in <list_of_section_constraints> can only be used once.
Inside List Section, the data context is defined by the constraints applied to the current section for every processed line. The data context is restored after the list processing.
Constraints:
Inside List Section the following statements are forbidden:
Language 
Publication 
List Issue 
Issue 
List Section 
Section 
List Section statement cannot be used inside List Article, List Subtitle, List SearchResult statements.
3.9.3.3 List of Articles
Purpose:
Select the list of articles according to the given constraints and current environmental parameters. The Publication, Language, Issue, Section, Article parameters may not be defined outside List Article statement; inside the statement however, all these parameters are defined. The code between "List .. Article.. " statement and "ForEmptyList" (if used) or "EndList" is repeated for every article in the list. When the list of article is empty the code in between "ForEmptyList" and "EndList" is executed once.
Syntax:
List [length <integer_value>] [column <integer_value>] 
     Article [<list_of_article_constraints>] [<list_of_article_type_constraints>] 
        [order <order_condition>]
<list_of_instructions>
[ForEmptyList [<list_of_instructions>]]
EndList [Article]
where
length <integer_value> where <integer_value> specifies list_length forces the list to have at most list_length items. If the list contains more items than list_length items the ones not fitting in can be listed using If NextItems/PreviousItems statements. 
columns <integer_value> where <integer_value> specifies columns_number sets an environment variable. This is incremented as if the items would be placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see If List. 
<list_of_instructions> may contain any statement except: "Language", "Publication", "List Issue", "Issue", "List Section", "Section", "List Article", "Article". 
<list_of_article_constraints> =
[<article_constraint>] <list_of_article_constraints> 
| <article_constraint>
<article_constraint> =
name <string_operator> <string_value> 
|number <integer_operator> <integer_value> 
|keyword <string_value> 
|OnFrontPage [<switch_operator> <switch_value>] 
|OnSection [<switch_operator> <switch_value>] 
|upload_date <date_operator> <date_value> 
|public <switch_operator> <switch_value> 
|[<article_type>] <article_type_attribute> <attribute_type_operator> <attribute_type_value> 
|topic is|not <string_value>
name, number, upload_date are self explaining article attributes 
keyword: all articles containing the specified keyword (and respecting all the other constraints) will be in the list 
OnFrontPage: articles having "Show article on front page" flag in <switch_operator> relation with <switch_value> will be selected; for details see Creating articles within a section 
OnSection: articles having "Show article on section page" flag in <switch_operator> relation with <switch_value> will be selected; for details see Creating articles within a section 
public: articles having "Allow users without subscription..." flag in <switch_operator> relation with <switch_value> will be selected 
... <article_type_attribute> ...: articles being of <article_type> and having <article_type_attribute> in <attribute_type_operator> relation with <attribute_type_value> will be selected; for details see Defining article types 
topic: if "is" operator is used, articles having specified topic in their list of topics will be selected; if "not" operator is uses articles not having specified topic in their list of topics will be selected 
<list_of_article_type_constraints> =
[<article_type_constraint>] <list_of_article_type_constraints> 
| <article_type_constraint>
<article_type_constraint> = type <string_operator> <string_value> 
<order_condition> =
bydate desc|asc 
|bynumber desc|asc
Inside the List, the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing.
Constraints:
Inside List Article the following statements are forbidden:
Language
Publication
List Issue
Issue
List Section
Section
List Article
Article
List Article statement cannot be used inside List Subtitle, List SearchResult statements.
3.9.3.4 List of Subtitles
Purpose:
Select the list of subtitles according to the given constraints and current environmental parameters. The article if not specified somewhere else, is treated as group of paragraphs. The markup for a new paragraph is the subtitle. The code between "List ... Article ..." statement and "ForEmptyList" (if used) or "EndList" is repeated for every article in the list. When the list of article is empty the code in between "ForEmptyList" and "EndList" is executed once.
Syntax:
List [length <integer_value>] [column <integer_value>] 
     Subtitle <list_of_instructions>
[ForEmptyList [<list_of_instructions>]]
EndList [Article]
where
length <integer_value> where <integer_value> specifies list_length forces the list to have at most list_length items. If the list contains more items than list_length items the ones not fitting in can be listed using If NextItems/PreviousItems statements. 
columns <integer_value> where <integer_value> specifies columns_number sets an environment variable. This is incremented as if the items would be placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very usefull in building tables of data. For details see If List. 
<list_of_instructions> may contain any statement except: "Language", "Publication", "List Issue", "Issue", "List Section", "Section", "List Article", "Article". 
Inside the List, the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing. In List Subtitles statement the NextItems and PreviousItems statements don't work in the expected manner, because they refer to the list of article, the most inner level for publication components. In the same template one can use list of articles which are treated as lists of paragraphs, so a new option was needed and is called NextSubtitle (and PrevSubtitle respectively).
Constraints:
Inside List Subtitle the following statements are forbidden:
Language 
Publication 
List Issue 
Issue 
List Section 
Section 
List Article 
Article 
3.9.3.5 List Search Result
Purpose:
Select the list of articles after searching database for given keywords. The Publication, Language, Issue, Section, Article parameters may not be defined outside List SearchResult statement; inside the statement however, all these parameters are defined. The code between "List .. Article.. " statement and "ForEmptyList" (if used) or "EndList" is repeated for every article in the list. When the list of article is empty the code in between "ForEmptyList" and "EndList" is executed once.
Syntax:
List [length <integer_value>] [column <integer_value>] 
    SearchResult [order <order_condition>]
<list_of_instructions> [ForEmptyList [<list_of_instructions>]]
EndList [SearchResult]
where
length <integer_value> where <integer_value> specifies list_length forces the list to have at most list_length items. If the list contains more items than list_length items the ones not fitting in can be listed using If NextItems/PreviousItems statements. 
columns <integer_value> where <integer_value> specifies columns_number sets an environment variable. This is incremented as if the items would be placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very usefull in building tables of data. For details see If List. 
<list_of_instructions> may contain any statement except: "Language", "Publication". 
<order_condition> =
bydate desc|asc 
|bynumber desc|asc
Inside the List, the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing.
Constraints:
Inside List SearchResult the following statements are forbidden:
Language 
Publication 
Note!!! (This is valid only for 2.0.11 and newer versions.) 
All If statements can be negated by inserting "not" between If and its modifier (Publication, Issue etc.) 
Example: 
  <**If Publication defined> 
and the negated version: 
  <**If not Publication defined> 
3.9.3.6 If NextItems | PreviousItems
Purpose:
It runs the first or second list of instructions depending on existing articles in a limited length list after/before the end/start of the list. It can be used only inside List statements, especially to validate Next | Previous buttons.
Syntax:
If [not] NextItems|PreviousItems [<list_of_instructions>]
[Else [<list_of_instructions>]]
EndIf [NextItems|PreviousItems]
Constraints:
Can be used only inside List statement. It can not be used inside ForEmptyList block of List statement. Also, If NextItems can not be used inside If PreviousItems and viceversa.
3.9.3.7 If NextSubtitles | PrevSubtitles
Purpose:
It runs the first or second list of instructions depending on existing paragraphs (marked with their subtitles) in a With statement. It can be used only inside With statement, especially to validate Next | Previous buttons.
Syntax:
If NextSubtitles | PrevSubtitles [<list_of_instructions>]
[Else [<list_of_instructions>]]
EndIf [NextSubtitles | PrevSubtitles]
Constraints:
Can be used only inside With statement. Also, If NextSubtitles can not be used inside If PrevSubtitles and vice versa.
3.9.3.8 If List
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It can be used inside List instructions. It is used to build tables from lists.
Syntax:
If List <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [List]
where
<condition> = 
row <table_item_values> 
|column <table_item_values>
|index <table_item_values>
|start 
|end
<table_item_values> = odd|even|<number_list>
<number_list> =
[<integer_value>] <number_list> 
|<integer_value>
Example:
<!** If List row odd> 
Odd row
<!** Else>
Even row
<!** EndIf>
<!** If List row 1 4 5>
Row is 1, 4 or 5
<!** Else>
Row is 2, 3 or bigger than 5
<!** EndIf>
<!** If List start>
Draw table head
<!** Else>
Draw table row
<!** EndIf>
Building a table: 
<!** List columns 3 ... > 
    <!** If List start> <-- start table --> <table> <!** EndIf> 
    <!** If List column 1> <-- start new row --> <tr> <!** EndIf> 
    <td> write text/data here </td> 
    <!** If List column 3> <-- close row --> </tr> <!** EndIf> 
    <!** If List end> <-- end table --> </table> <!** EndIf> 
<!** EndList>
Constraints:
Can only be used only inside List statements.
3.9.3.9 Include
Purpose:
Specify the text file to be included in a certain position of the current template. This instruction passes data context to the included template on runtime.
Syntax:
Include <template_path>
Note: the <template_path> can be relative to the position of the current template, if the path starts with a letter, or relative to the server's document root, if the path starts with a '/'.
Constraints:
None.
3.9.3.10 If Publication
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It may be used anywhere in the template. It is used when printing information for a certain publication.
Syntax:
If Publication <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Section]
<condition> = 
name <string_operator> <string_value> 
|identifier <integer_operator> <integer_value> 
|defined 
|fromstart
name: the if condition is true if actual publication name is in <string_operator> relation with <string_value> 
identifier: the if condition is true if actual publication identifier is <integer_value> 
defined: the if condition is true if publication parameter is defined 
fromstart: the if condition is true if actual value of publication parameter is equal with the value from template start 
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list, it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3.11 If Issue
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It may be used anywhere in the template. It is used when printing information for a certain issue.
Syntax:
If Issue <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Section]
where 
<condition> = 
name <string_operator> <string_value> 
|number <integer_operator> <integer_value> 
|publish_date <date_operator> <date_value> 
|iscurrent |defined |fromstart
name: the if condition is true if actual issue name is in <string_operator> relation with <string_value> 
number: the if condition is true if actual issue number is in <integer_operator> relation with <integer_value> 
publish_date: the if condition is true if actual issue publish date is in <date_operator> relation with <date_value> 
defined: the if condition is true if issue parameter is defined 
fromstart: the if condition is true if actual value of issue parameter is equal with the value from template start 
iscurrent: the if condition is true if actual issue is the current issue (the last published issue) 
Example:
<!** If Issue number is 1>
This is Issue number 1
<!** EndIf>
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list, it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3.12 If Section 
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It may be used anywhere in the template. It is used when printing information for a certain section.
Syntax:
If Section <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Section]
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list, it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
<condition> =
number <integer_operator> <integer_value>
| name <string_operator> <string_value>
| defined
| fromstart
number: the if condition is true if runtime section number is in <integer_operator> relation with <integer_value>
name: the if condition is true if runtime section name is in <string_operator> relation with <string_value>
defined: the if condition is true if section parameter is defined
fromstart: the if condition is true if actual value of section parameter is equal with the value from template start
Constraints:
None.
3.9.3.13 If Article
Purpose:
Depending on the given condition, it runs the first (for true) or second (for false) list of instructions. It may be used anywhere in the template. It is used when printing information from different types of article.
Syntax:
If Article <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Article]
where
<condition> = 
type <string_value> 
|name <string_operator> <string_value> 
|upload_date <date_operator> <date_value> 
|has_keyword <string_value> 
|OnFrontPage <switch_operator> <switch_value> 
|OnSection <switch_operator> <switch_value> 
|public 
|defined 
|fromstart 
|translated_to <string_value> 
|[<article_type>] <article_type_attribute> <attribute_type_operator> <attribute_type_value>
type: the condition is true if article type is <string_value>
name: the condition is true if article name is in <string_operator> relation with <string_value>
upload_date: the condition is true if article upload date is in <date_operator> relation with <date_value>
has_keyword: the condition is true if specified keyword is in article keywords list
public: the condition is true if the article is public (has the public flag set).
OnFrontPage: the condition is true if "Show article on front page" flag is in <switch_operator> relation with <switch_value>
OnSection: the condition is true if "Show article on section page" flag is in <switch_operator> relation with <switch_value>
defined: the condition is true if article parameter is defined
fromstart: the condition is true if actual value of article parameter is equal with the value from template start
translated_to: <string_value> must be a valid language code; the condition is true if the article has a translation into the language specified by the language code
... <article_type_attribute> ...: the condition is true if the article is of <article_type> and <article_type_attribute> is in <attribute_type_operator> relation with <attribute_type_value>. <article_type_attribute> is an attribute specific to an article type; for details see Defining article types
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3.14 If Allowed
Purpose:
It is used when printing article protected information. It is true when the reader has access to the article referred to by the environment variables. If no article is referred to, the result is false. If true, runs the first list of instructions and the second list on false. It is true if the reader has an active subscription including the article section or the article is public.
Syntax:
If Allowed
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf
The list of instructions may contain any instruction allowed in current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3.15 If Subscription
Purpose:
Depending on the given condition, it runs the first, the second list of instructions or neither of them. If the subscription event did not occur, neither of the instructions list will be run. (This implies a certain order to be followed; that is, the template containing If Subscription must follow a template containing Subscription). It may be used anywhere in the template. It is used to describe the subscription result.
Syntax:
If Subscription <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf
where
<condition> = ok | error | trial | paid | action
ok: the if condition is true if subscription action was taken and its result is success 
error: the if condition is true if subscription action was taken and its result is error 
trial: the if condition is true if subscription action was taken and its type is trial 
paid: the if condition is true if subscription action was taken and its type is paid 
action: the if condition is true if subscription action was taken 
The list of instructions may contain any instruction allowed in current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.3.16 If Login
Purpose:
Depending on the given condition, it runs the first, the second list of instructions or neither of them. If the login event did not occur, neither of the instructions list will be run. (This implies a certain order to be followed; that is, the template containing If Login must follow a template containing Login). It may be used anywhere in the template. It is used to describe the subscription result.
Syntax:
If Login <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf
where
<condition> = ok | error | action
ok: the if condition is true if login action was taken and its result is success 
error: the if condition is true if login action was taken and its result is error 
action: the if condition is true if login action was taken 
The list of instructions may contain any instruction allowed in current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
Cannot be used inside Login-EndLogin statement.
3.9.3.17 If User
Purpose:
Depending on given condition, it runs the first, the second list of instructions or none. If the User event didn't occur, none of the instructions list will be run. (It implies a certain order to be followed; that is, the template containing If User must follow a template containing User). It may be used anywhere in template. It is used to describe the subscription result.
Syntax:
If User <condition>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf
where
<condition> = 
addok 
|modifyok
|adderror
|modifyerror
|defined
|addaction
|modifyaction 
|loggedin
addok: the if condition is true if user add action was taken and its result is success 
modifyok: the if condition is true if user modify action was taken and its result is success 
adderror: the if condition is true if user add action was taken and its result is error 
modifyerror: the if condition is true if user modify action was taken and its result is error 
addaction: the if condition is true if user add action was taken 
modifyaction: the if condition is true if user modify action was taken 
defined: the if condition is true if user is defined (user cookie exists); this doesn't necessary mean that the user is properly logged in 
loggedin: the if condition is true if user is properly logged in 
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
Cannot be used inside User-EndUser statement.
3.9.3.18 If CurrentSubtitle
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It may be used within the list of subtitle (while printing an article). It runs the first list of instructions when the index of subtitles list equals the number of the current subtitle (selected for printing).
Syntax:
If CurrentSubtitle
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [CurrentSubtitle]
Constraints:
Can be used only inside With and List Subtitles statements.
3.9.3.19 If Image
Purpose:
If image exists, it runs the first list of instructions, otherwise the second list. It may be used anywhere in the template.
Syntax:
If Image <integer_value>
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Image]
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
Note:
The If Image statement is valid only in 2.0.11 and newer versions. It won't work in 2.0.10 or older versions. 
3.9.3.20 If Language
Purpose:
Depending on the given condition, it runs the first or second list of instructions. It may be used anywhere in the template.
Syntax:
If Language condition
<list_of_instructions>
[Else [<list_of_instructions>]]
EndIf [Section]
where 
<condition> = 
number <integer_operator> <integer_value> 
|name <string_operator> <string_value> 
|englname <string_operator> <string_value> 
|code <string_operator> <string_value> 
|defined
|fromstart
defined: the if condition is true if language parameter is defined 
fromstart: the if condition is true if actual value of language parameter is equal with the value from template start 
number: the if condition is true if operation: number <integer_operator> <integer_value> is true 
name, englname, code: the if condition is true if operation: name|englname|code <string_operator> <string_value> is true 
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
Note:
The If Language statement is valid only in 2.0.12 and newer versions. It won't work in 2.0.11 or older versions. 
3.9.3.21 With
Purpose:
Used to access a body field of a certain type of articles. When working with subtitles this statement is mandatory. See also List Subtitle, If PrevSubtitles, If NextSubtitles
Syntax:
With <article_type> <body_field>
<list_of_instructions>
EndWith
where 
<article_type> identifies a valid article type 
<body_field> identifies a valid field of the given article type 
The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list (List Issue, List Section, List Article, List Subtitle, List SearchResult).
Constraints:
None.
3.9.4 Printable information
3.9.4.1 URL, Form
Purpose:
URLParameters prints the runtime environment parameters in URL format. It prints only data context parameters and can be used to create links.
FormParameters prints the runtime environment parameters in HTML form format. It prints only data context parameters and can be used to create links.
Syntax:
URLParameters [<list_of_parameters>]
FormParameters [fromstart]
where 
<list_of_parameters> =
[<parameter>] <list_of_parameters> 
| <parameter>
<parameter> =
allsubtitles 
| fromstart
| <reset_list>
| image <image_number>
<reset_list> =
reset_issue_list 
| reset_section_list
| reset_article_list
| reset_searchresult_list 
| reset_subtitle_list
<image_number> is an <integer_value> representing a valid number of article image 
allsubtitles: following this link the whole article will be printed, instead of one subtitle. 
fromstart: prints the parameters received at the start of template, not the current ones (useful when building sitemaps) 
reset_issue_list: reset list counters for all the lists (issue, section, article, searchresult, subtitle) 
reset_section_list: reset list counters for the following lists: section, article, searchresult, subtitle 
reset_article_list: reset list counters for the following lists: article, searchresult, subtitle 
reset_searchresult_list: reset list counters for the following lists: searchresult, subtitle 
reset_subtitle_list: reset list counters for the following lists: subtitle 
image: print image parameters in order to show an image in template 
Example:
Suppose the data context is set to Language 1 (identifier), Publication 2 (identifier), Issue 3 (number), Section 6 (number). The printed string is:
IdLanguage=1&IdPublication=2&NrIssue=3&NrSection=6 
for URLParameters, and
<input type=hidden name=IdLanguage value="1">
<input type=hidden name=IdPublication value="2">
<input type=hidden name=NrIssue value="3">
<input type=hidden name=NrSection value="6">
for FormParameters respectively.
If Image is specified on URLParameters, the parameters for <image_number> of the article specified in the data context will be printed.
Example: 
IdPublication=2&NrIssue=3&NrSection=6&NrArticle&NrImage=4
Constraints:
None.
3.9.4.2 Print
Purpose:
Print the selected information.
Syntax:
Print <expression>
where
<expression> =
<language_expression> 
| <publication_expression>
| <issue_expression> 
| <section_expression>
| <article_expression> 
| <image_expression>
| <list_expression> 
| <subscription_expression>
| <login_expression> 
| <user_expression>
| <subtitle_expression>
<language_expression> = Language name |number |englname |code |codepage 
name: language name 
number: language identifier in the CAMPSITE database 
englname: language name in English 
code: language international code 
codepage: page code corresponding to the language 
For details on language see languages. 
<publication_expression> = Publication name |identifier |site 
name: publication name 
identifier: publication identifier in the CAMPSITE database 
site: publication site (see also Creating a new publication) 
For details on publication see Creating a new publication. 
<issue_expression> = Issue name |number |<date_attribute> |date <date_format> |template 
name: issue name 
number: issue identifier in the CAMPSITE database 
<date_attribute>: print an issue publish date field (year, month, day etc.); see details 
date <date_format>: print issue publish date using the given format; see details 
template: print the full path of the issue template file 
For details on issue see Creating a new issue. 
<section_expression> = Section name |number 
name: section name 
number: section identifier in the CAMPSITE database 
For details on section see Add new sections to an issue 

<article_expression> = Article 
name |number |keywords |type |<date_attribute> |upload_date [<date_format>] 
|[<article_type>] <article_type_attribute> [<date_format>] |template
name: article name
number: article identifier in the CAMPSITE database 
keywords: article keywords 
type: article type (see details) 
<date_attribute>: print an article upload date field (year, month, day etc.); see details 
upload_date [<date_format>]: print article upload date using the given format; see details 
[<article_type>] <article_type_attribute> [<date_format>]: print an article field specific to a certain article type (see Defining article types); if the field type is date a date format may be specified; see date format details 
template: print the full path of the article template file 
For details on article see Creating articles within a section and Editing articles: Edit Article Details view 

<image_expression> = Image 
photographer |place |description |<date_attribute> 
|date [<date_format>]
photographer, place, description are fields describing the image 
<date_attribute>: 
date [<date_format>]: 
<list_expression> = List row |column |index 
row: list row; if column is not specified in list statement or has value 1 row takes the value of the element number in the list 
column: list column; if column is not specified in list statement it will have a vallue of 1 for every list element 
index: element number in the list; if list length is specified index will take the value of list_length * number_of_steps_from_list_start * elment_number where 
list_length is the maximum length of the list 
number_of_steps_from_list_start is how many steps the list start moved from the "whole list" start 
elment_number is the number of the element in the current list 
For details on list see If List 

<subscription_expression> = Subscription 
expdate [<date_format>] |unit |unitcost |currency |trialtime |paidtime |totalcost |error
expdate, unit, unitcost, currency, trialtime, paidtime, totalcost are fields describing the publication subscription 
error: if subscription action took place (after submitting a subscription form) it prints the error message (if there was an errror) 
For details on subscription see CONFIGURING THE SUBSCRIPTION MODULE 
<login_expression> = Login error 
error: if login action took place (after submitting a login form) it prints the error message (if there was an errror) 

<user_expression> = User 
adderror |modifyerror |name |uname |email |city |straddress |state |country |phone |fax |contact |phone2 |PostalCode |Employer |Position |Interests |How |Languages |Improvements |Field1 |Field2 |Field3 |Field4 |Field5 |Text1 |Text2 |Text3 |Title |Age
adderror: if user add action took place (after submitting a user subscription form) it prints the error message (if there was an errror) 
modifyerror: if user modify action took place (after submitting a user info form) it prints the error message (if there was an errror) 
the other parameters (name, uname, email, city...) are fields describing the user information; they are self-explaining; Field1-Field5, Text1-Text3 are extra fields for storing some extra information; the publication administrator sets their meaning 
<subtitle_expression> = Subtitle name
name: print subtitle name (see also Editing body-type fields: Working with CAMPFIRE) 
Constraints:
Print List can be used only inside List-EndList statement. 
Print Login can be used only outside Login-EndLogin statement. 
3.9.4.3 Date
Purpose:
Prints the current date according to format or only a date attribute.
Syntax:
Date <date_attribute>|<date_format>
where

<date_attribute> = 
year
|mon_nr
|mday
|yday
|wday_nr
|hour
|min
|sec
|mon_name
|wday_name
The attributes have the following meanings:
year: year as number 
mon_nr: month as number 
mday: day of the month (number) 
yday: day of the year (number) 
wday_nr: day of the week (number) 
hour: hour (0-23) 
min: minute 
sec: second 
mon_name: name of the month (in the language set to the data context) 
wday_name: name of the day of the week (in language set to the data context) 
<date_format> may contain any printable character except ", tab and >. If the date format contains separators (space, end of line) it must be enclosed in "" characters. The following groups of characters have special meaning:
%M - month name 
%W - weekday name 
%Y - year (4 digits) 
%y - year (2 digits) 
%m - month (01..12) 
%c - month (1..12) 
%d - day of the month (00..31) 
%e - day of the month (0..31) 
%j - day of the year (001..366) 
%D - day of the month with English suffix (1st, 2nd, 3rd etc.) 
Constraints:
None.
3.9.4.4 Subscription
Purpose:
Generate the form and default data fields for subscription. Inside this can be used Edit and Select statements to generate fields for every section on issue.
Syntax:
Subscription <template_name> <button_name> [<total_field_name> <evaluate_button_name>]
<list_of_instructions>
EndSubscription
<template_name> is the name of the next template to be requested from subscription form. 
<button_name> is the name of the button for submitting the form. 
<total_field_name> is the name of the field where the total payment is written. 
<evaluate_button_name> is the name of the evaluate button (when pressing this button the total payment is updated in the total field. 
Constraints:
Cannot be used inside User-EndUser, Login-EndLogin statements. Can not be used within itself (ex.: subscription in subscription).
3.9.4.5 User
Purpose:
Generate the form and data fields for adding new user;
Syntax:
User <template_name> <button_name>
<list_of_instructions>
EndUser
<template_name> is the name of the next template to be requested from user form. 
<button_name> is the name of the button for submitting the form. 
Constraints:
Can not be used inside Subscription-EndSubscription, Login-EndLogin statements. Can not be used within itself (ex.: user in user).
3.9.4.6 Login
Purpose:
Generate the form and data fields for logging in a user.
Syntax:
Login <template_name> <button_name>
<list_of_instructions>
EndLogin
<template_name> is the name of the next template to be requested from login form. 
<button_name> is the name of the button for submitting the form. 
Constraints:
Can not be used inside Subscription-EndSubscription, User-EndUser statements. Cannot be used within itself (e.g. login in login).
3.9.4.7 Search
Purpose:
Generate the search form and data fields.
Syntax:
Search <template_name> <button_name>
<list_of_instructions> 
EndSearch
<template_name> is the name of the next template to be requested from search form. 
<button_name> is the name of the button for submitting the form. 
The list of instructions may contain any instruction allowed in the current context. If it is used inside another list it must respect the constraints of the list (List Issue, List Section, List Article).
Constraints:
Can not be used within itself (e.g. search in search).
3.9.4.8 Edit
Purpose:
Generate the input text fields for subscription, user add/modify, login or search forms.
Syntax:
Edit 
<subscription_expression>
|<user_expression>
|<login_expression>
|<search_expression>
<subscription_expression> = Subscription time
Generates an input field for editing the subscription time. 
<user_expression> = User 
name |uname |password |passwordagain |email |city |straddress |state |phone |fax |contact |phone2 |postalcode |employer |position |interests |how |languages |improvements |field1 |field2 |field3 |field4 |field5 |text1 |text2 |text3
The parameters (name, uname, email, city...) are fields describing the user information; they are self-explaining; Field1-Field5, Text1-Text3 are extra fields for storing some extra information; the publication administrator sets their meaning. Edit User generates an text input for editing the selected field. 
<login_expression> = Login uname |password 
Generates a text input for editing login user name or password. 
<search_expression> = Search keywords
Generates a text input for editing the search keywords. 
Constraints:
Edit Subscription can be used inside Subscription-EndSubscription statement only. 
Edit User can be used inside User-EndUser statement only. 
Edit Login can be used inside Login-EndLogin statement only. 
Edit Search can be used inside Search-EndSearch statement only. 
3.9.4.9 Select
Purpose:
Generate input data pop-up list, list, radio button or checkbox for subscription, user or search forms.
Syntax:
Select 
<subscription_expression>
|<user_expression>
|<search_expression>
<subscription_expression> = Subscription section
Generates a multiple select list for selecting sections in subscription form. 
<user_expression> = User 
country |title |gender |age |employertype |pref1 |pref2 |pref3 |pref4
The parameters (country, title, gender...) are fields describing the user information; they are self-explaining; pref1-pref4 are extra fields for storing some extra information; the publication administrator sets their meaning. Generates pop-up list or radio-button for selecting values for the above fields. 
<search_expression> = Search mode |level
Generates a checkbox for selecting the search mode (match one or all keywords). 
Constraints:
Select Subscription can be used inside Subscription-EndSubscription statement only. 
Select User can be used inside User-EndUser statement only. 
Select Search can be used inside Search-EndSearch statement only. 

4. APENDIX I - ALPHABETIC LIST OF LANGUAGE STATEMENTS
Article (3.9.2.5) 
Date (3.9.4.3) 
Edit Login (3.9.4.8) 
Edit Search (3.9.4.8) 
Edit Subscription (3.9.4.8) 
Edit User (3.9.4.8) 
Form (3.9.4.1) 
If Allowed (3.9.3.14) 
If Article (3.9.3.13) 
If CurrentSubtitle (3.9.3.18) 
If Image (3.9.3.19) 
If Issue (3.9.3.11) 
If Language (3.9.3.20) 
If List (3.9.3.8) 
If Login (3.9.3.16) 
If NextItems (3.9.3.6) 
If NextSubtitles (3.9.3.7) 
If PreviousItems (3.9.3.6) 
If PrevSubtitles (3.9.3.7) 
If Publication (3.9.3.10) 
If Section (3.9.3.12) 
If Subscription (3.9.3.15) 
If User (3.9.3.17) 
Include (3.9.3.9) 
Issue (3.9.2.3) 
Language (3.9.2.1) 
List Article (3.9.3.3) 
List Issue (3.9.3.1) 
List SearchResult (3.9.3.5) 
List Section (3.9.3.2) 
List Subtitle (3.9.3.4) 
Local (3.9.2.6) 
Login (3.9.4.6) 
Print Article (3.9.4.2) 
Print Image (3.9.4.2) 
Print Issue (3.9.4.2) 
Print Language (3.9.4.2) 
Print List (3.9.4.2) 
Print Login (3.9.4.2) 
Print Publication (3.9.4.2) 
Print Section (3.9.4.2) 
Print Subscription (3.9.4.2) 
Print Subtitle (3.9.4.2) 
Print User (3.9.4.2) 
Publication (3.9.2.2) 
Search (3.9.4.7) 
Section (3.9.2.4) 
Select Search (3.9.4.9) 
Select Subscription (3.9.4.9) 
Select User (3.9.4.9) 
Subscription (3.9.4.4) 
URLParameters (3.9.4.1) 
User (3.9.4.5) 
With (3.9.3.21) 
5. APPENDIX II - CHARACTER SETS AND LANGUAGES
Covering non-ASCII character sets requires standards to make such special characters cross-platform compatible. Some standards have been set over the past years and are already implemented in most browsers. These are:
Code Page Character Set
ISO-8859-1 Latin 1 I 
ISO-8859-2 Latin 2 
ISO-8859-3 Latin 3 
ISO-8859-4 Baltic 
ISO-8859-5 Cyrillic 
ISO-8859-6 Arabic 
ISO-8859-7 Greek 
ISO-8859-8 Hebrew 
ISO-8859-9 Turkish 
ISO-8859-15 Latin 9 
Multilingual support has been developed in various projects, independently from each other, resulting in some confusion and a lack of consistent standards. Recently those efforts have been channeled into a new universal standard called Unicode. Unicode tries to encapsulate all previously defined character sets, expanding the bytes used to represent each character. For more information on the Unicode project, see the official web site: http://www.unicode.org/
Because different vendors had already created different versions of Unicode characters, we have endowed CAMPSITE with a generic translation table so that characters represented with one byte can be seen within this application without any special configurations on the client side.
IMPORTANT: The configuration of your local machine must be set for multilingual support. 
Below you can find the best matches for individual languages and the appropriate character sets:
Latin1 covers most West European languages, such as French (fr), Spanish (es), Catalan (ca), Basque (eu), Portuguese (pt), Italian (it), Albanian (sq), Rhaeto-Romanic (rm), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Faroese (fo), Icelandic (is), Irish (ga), Scottish (gd), and English (en), incidentally also Afrikaans (af) and Swahili (sw), thus in effect also the entire American continent, Australia and much of Africa. The most notable exceptions are Zulu (zu) and other Bantu languages using Latin Extended-B letters, and of course Arabic in North Africa, and Guarani (gn) missing GEIUY with ~ tilde. The lack of the ligatures Dutch IJ, French OE and ,,German` quotation marks is considered tolerable. The lack of the new C=-resembling Euro currency symbol U+20AC has opened the discussion of a new Latin0. 
Latin1 has also been adopted as the first page of ISO 10646 (Unicode).
Latin1 is HTML's base charset but HTML has now been globalized through RFC 2070.
Latin2 covers the languages of Central and Eastern Europe: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian. For Romanian the S and T had better use commas instead of cedilla as in Turkish: the U+015F LATIN SMALL LETTER S WITH CEDILLA at =BA ought to be read as U+0219 LATIN SMALL LETTER S WITH COMMA BELOW etc. The German Umlaute äöüß are found at exactly the same positions in Latin1, Latin2, Latin3, Latin4, Latin5, Latin6. Thus you can write German and Polish with Latin2 or German and Turkish with Latin5 but there is no 8bit charset to properly mix German and Russian, for instance. 
Latin3 is popular with authors of Esperanto (eo) and Maltese (mt), and it covered Turkish before the introduction of Latin5 in 1988. 
Latin4 introduced letters for Estonian (et), the Baltic languages Latvian (lv, Lettish) and Lithuanian (lt), Greenlandic (kl) and Lappish. Note that Latvian requires the cedilla on the =BB U+0123 LATIN SMALL LETTER G WITH CEDILLA to jump on top. Latin4 was followed by Latin6. 
Latin5: With these Cyrillic letters you can type Bulgarian (bg), Belarusian (be), Macedonian (mk), Russian (ru), Serbian (sr) and pre-1990 (no ghe with upturn) Ukrainian (uk). The ordering is based on the (incompatibly) revised GOST 19768 of 1987 with the Russian letters except for ë sorted by Russian alphabet (ABVGDE). Some still prefer to use in their applications the Ukrainian character set, KOI8-U.
Latin6: This is the Arabic alphabet. Unfortunately the basic alphabet for Arabic (ar) does not containing the four extra letters for Persian (fa) nor the eight extra letters for Pakistani Urdu (ur). This fixed font is not well-suited for text display. Each Arabic letter occurs in up to four (2²) presentation forms: initial, medial, final or separate. To make Arabic text legible you'll need a display engine that analyses the context and combines the appropriate glyphs on top of a handler for the reverse writing direction shared with Hebrew. Introduced in 1992, Latin6 rearranged the Latin4 characters, dropped some symbols and the Latvian &rcedil;, added the last missing Inuit (Greenlandic Eskimo) and non-Skolt Sami (Lappish) letters and reintroduced the Icelandic ðýþ to cover the entire Nordic area. Skolt Sami still needs a few more accents. Note that RFC 1345 and GNU recode contain errors and use a preliminary and different latin6.
6. APPENDIX III - ISO 639 LANGUAGE CODES
ISO 639 LANGUAGE CODES SORTED BY LANGUAGE GROUP
LANGUAGE
CODE
LANGUAGE FAMILY
AYMARA 
AY 
AMERINDIAN 
GUARANI 
GN 
AMERINDIAN 
QUECHUA 
QU 
AMERINDIAN 
BHUTANI 
DZ 
ASIAN 
BURMESE 
MY 
ASIAN 
CAMBODIAN 
KM 
ASIAN 
CHINESE 
ZH 
ASIAN 
JAPANESE 
JA 
ASIAN 
KOREAN 
KO 
ASIAN 
LAOTHIAN 
LO 
ASIAN 
THAI 
TH 
ASIAN 
TIBETAN 
BO 
ASIAN 
VIETNAMESE 
VI 
ASIAN 
LATVIAN 
LV 
BALTIC LETTISH 
LITHUANIAN 
LT 
BALTIC 
BASQUE 
EU 
BASQUE 
BRETON 
BR 
CELTIC 
IRISH 
GA 
CELTIC 
SCOTS GAELIC 
GD 
CELTIC 
WELSH 
CY 
CELTIC 
KANNADA 
KN 
DRAVIDIAN 
MALAYALAM 
ML 
DRAVIDIAN 
TAMIL 
TA 
DRAVIDIAN 
TELUGU 
TE 
DRAVIDIAN 
GREENLANDIC 
KL 
ESKIMO 
INUPIAK 
IK 
ESKIMO 
ESTONIAN 
ET 
FINNO-UGRIC 
FINNISH 
FI 
FINNO-UGRIC 
HUNGARIAN 
HU 
FINNO-UGRIC 
AFRIKAANS 
AF 
GERMANIC 
DANISH 
DA 
GERMANIC 
DUTCH 
NL 
GERMANIC 
ENGLISH 
EN 
GERMANIC 
FAROESE 
FO 
GERMANIC 
FRISIAN 
FY 
GERMANIC 
GERMAN 
DE 
GERMANIC 
ICELANDIC 
IS 
GERMANIC 
NORWEGIAN 
NO 
GERMANIC 
SWEDISH 
SV 
GERMANIC 
YIDDISH 
YI 
GERMANIC 
AFAN 
OM 
HAMITIC (OROMO) 
AFAR 
AA 
HAMITIC 
SOMALI 
SO 
HAMITIC 
ABKHAZIAN 
AB 
IBERO-CAUCASIAN 
GEORGIAN 
KA 
IBERO-CAUCASIAN 
ASSAMESE 
AS 
INDIAN 
BENGALI 
BN 
INDIAN BANGLA 
BIHARI 
BH 
INDIAN 
GUJARATI 
GU 
INDIAN 
HINDI 
HI 
INDIAN 
KASHMIRI 
KS 
INDIAN 
MARATHI 
MR 
INDIAN 
NEPALI 
NE 
INDIAN 
ORIYA 
OR 
INDIAN 
PUNJABI 
PA 
INDIAN 
SANSKRIT 
SA 
INDIAN 
SINDHI 
SD 
INDIAN 
SINGHALESE 
SI 
INDIAN 
URDU 
UR 
INDIAN 
ALBANIAN 
SQ 
INDO-EUROPEAN 
ARMENIAN 
HY 
INDO-EUROPEAN 
ESPERANTO 
EO 
INTERNATIONAL 
INTERLINGUA 
IA 
INTERNATIONAL 
INTERLINGUE 
IE 
INTERNATIONAL 
VOLAPUK 
VO 
INTERNATIONAL 
KURDISH 
KU 
IRANIAN 
PASHTO 
PS 
IRANIAN PUSHTO 
PERSIAN 
FA 
IRANIAN (farsi) 
TAJIK 
TG 
IRANIAN 
GREEK 
EL 
LATIN/GREEK 
LATIN 
LA 
LATIN/GREEK 
HAUSA 
HA 
NEGRO-AFRICAN 
KINYARWANDA 
RW 
NEGRO-AFRICAN 
KURUNDI 
RN 
NEGRO-AFRICAN 
LINGALA 
LN 
NEGRO-AFRICAN 
SANGHO 
SG 
NEGRO-AFRICAN 
SESOTHO 
ST 
NEGRO-AFRICAN 
SETSWANA 
TN 
NEGRO-AFRICAN 
SHONA 
SN 
NEGRO-AFRICAN 
SISWATI 
SS 
NEGRO-AFRICAN 
SWAHILI 
SW 
NEGRO-AFRICAN 
TSONGA 
TS 
NEGRO-AFRICAN 
TWI 
TW 
NEGRO-AFRICAN 
WOLOF 
WO 
NEGRO-AFRICAN 
XHOSA 
XH 
NEGRO-AFRICAN 
YORUBA 
YO 
NEGRO-AFRICAN 
ZULU 
ZU 
NEGRO-AFRICAN 
FIJI 
FJ 
OCEANIC/INDONESIAN 
INDONESIAN 
ID 
OCEANIC/INDONESIAN 
JAVANESE 
JV 
OCEANIC/INDONESIAN 
MALAGASY 
MG 
OCEANIC/INDONESIAN 
MALAY 
MS 
OCEANIC/INDONESIAN 
MAORI 
MI 
OCEANIC/INDONESIAN 
SAMOAN 
SM 
OCEANIC/INDONESIAN 
SUNDANESE 
SU 
OCEANIC/INDONESIAN 
TAGALOG 
TL 
OCEANIC/INDONESIAN 
TONGA 
TO 
OCEANIC/INDONESIAN 
CATALAN 
CA 
ROMANCE 
CORSICAN 
CO 
ROMANCE 
FRENCH 
FR 
ROMANCE 
GALICIAN 
GL 
ROMANCE 
ITALIAN 
IT 
ROMANCE 
MOLDAVIAN 
MO 
ROMANCE 
OCCITAN 
OC 
ROMANCE 
PORTUGUESE 
PT 
ROMANCE 
RHAETO-ROMANCE 
RM 
ROMANCE 
ROMANIAN 
RO 
ROMANCE 
SPANISH 
ES 
ROMANCE 
AMHARIC 
AM 
SEMITIC 
ARABIC 
AR 
SEMITIC 
HEBREW 
HE 
SEMITIC 
MALTESE 
MT 
SEMITIC 
TIGRINYA 
TI 
SEMITIC 
BULGARIAN 
BG 
SLAVIC 
BYELORUSSIAN 
BE 
SLAVIC 
CROATIAN 
HR 
SLAVIC 
CZECH 
CS 
SLAVIC 
MACEDONIAN 
MK 
SLAVIC 
POLISH 
PL 
SLAVIC 
RUSSIAN 
RU 
SLAVIC 
SERBIAN 
SR 
SLAVIC 
SERBO-CROATIAN 
SH 
SLAVIC 
SLOVAK 
SK 
SLAVIC 
SLOVENIAN 
SL 
SLAVIC 
UKRAINIAN 
UK 
SLAVIC 
AZERBAIJANI 
AZ 
TURKIC/ALTAIC 
BASHKIR 
BA 
TURKIC/ALTAIC 
KAZAKH 
KK 
TURKIC/ALTAIC 
KIRGHIZ 
KY 
TURKIC/ALTAIC 
TATAR 
TT 
TURKIC/ALTAIC 
TURKISH 
TR 
TURKIC/ALTAIC 
TURKMEN 
TK 
TURKIC/ALTAIC 
UZBEK 
UZ 
TURKIC/ALTAIC 
BISLAMA
BI
 
MONGOLIAN
MN
 
NAURU
NA
 
7. APPENDIX IV: INSTALLING CAMPSITE ON A STANDARD RED HAT 7.0 SERVER
The following is a possible session, which would install CAMPSITE on your remote host. All text in square brackets is comment only, not to be typed.
localhost$ telnet youserverIP
Red Hat Linux release 7.0 (Guiness)
Kernel 2.2.16-22 onan i386
login : user
Password: userpwd
Last login...
yourserver# wget http://www.campware.org/look/campware/download/campsite-latest.tar.gz
yourserver# gzip -df campsite-latest.tar.gz
yourserver# tar -xf campsite-latest.tar
[Now you need to edit the httpd.conf file. Locate the file first by typing]
yourserver$ su
yourserver$ passowrd: pwdsu
yourserver# updatedb [if you haven't generated the database for locating yet]
yourserver# locate httpd.conf [Make a backup copy, always a good idea.]
yourserver# cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak [the location might vary, depending on your configuration and system version]
[Now open and edit the config file, you can see the changes that need to be done in the INSTALL file which is located in the campsite folder. Then you need to restart the http daemon:]
yourserver# kill -HUP `cat /var/run/httpd.pid` [the `` need to be angled from top left to bottom right.]
[Check if mysql and httpd are running:]
yourserver# ps -A | grep mysql [this should return some lines with pid numbers for the mysqld. If not, start mysql manually]
yourserver# ps -A | grep httpd [this should return some lines with pid numbers for the httpd. If not, start httpd manually (see above)]
yourserver# exit
yourserver# cd campsite
yourserver# install
yourserver# exit
[that's all...]
8. APPENDIX V - BACKING UP DATABASES IN MYSQL
In order to make a backup of your CAMPSITE database, do the following:
1.type: mysqldump -u <db_user> -p <password> campsite > yourname-db.sql 
In order to delete your CAMPSITE database from MySQL, do the following:
1.type: mysqladmin -u <db_user> -p <password> drop campsite 
2.confirm with 'y' 
In order to load your backed up CAMPSITE database, do the following:
1.create the campsite database by typing: mysqladmin -u <db_user> -p <password> create campsite 
2.edit the backup file you created and add the first line: use campsite;
(make sure you finish the line with a semicolon and do not start the line with a hash, which would mean it is only a comment). 
3.load the database by typing: mysql -u <db_user> -p <password> campsite < yourname-db.sql 